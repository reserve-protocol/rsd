// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ReserveDollarV2ABI is the input ABI used to generate the binding from.
const ReserveDollarV2ABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nominee\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"changeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"changePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFreezer\",\"type\":\"address\"}],\"name\":\"changeFreezer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"previousImplementation\",\"type\":\"address\"}],\"name\":\"completeHandoff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"},{\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferEternalStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"wipe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEternalStorageAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newFreezer\",\"type\":\"address\"}],\"name\":\"FreezerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"freezer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Frozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"freezer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"freezer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"wiped\",\"type\":\"address\"}],\"name\":\"Wiped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]"

// ReserveDollarV2Bin is the compiled bytecode used for deploying new contracts.
const ReserveDollarV2Bin = `60c0604052600e60808190527f5265736572766520446f6c6c617200000000000000000000000000000000000060a090815262000040916001919062000129565b506040805180820190915260048082527f52535644000000000000000000000000000000000000000000000000000000006020909201918252620000879160029162000129565b503480156200009557600080fd5b5033604051620000a590620001ae565b6001600160a01b03909116815260405190819003602001906000f080158015620000d3573d6000803e3d6000fd5b50600080546001600160a01b03199081166001600160a01b0393909316929092179055600480546006805433941684179055610100600160a81b0319166101009092029190911760ff19166001179055620001dc565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016c57805160ff19168380011785556200019c565b828001600101855582156200019c579182015b828111156200019c5782518255916020019190600101906200017f565b50620001aa929150620001bc565b5090565b610aa180620041c583390190565b620001d991905b80821115620001aa5760008155600101620001c3565b90565b613fd980620001ec6000396000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c8063715018a61161012a57806392716054116100bd5780639fd0506d1161008c578063a9059cbb11610071578063a9059cbb14610797578063dd62ed3e146107d0578063fb5689661461080b57610226565b80639fd0506d14610756578063a457c2d71461075e57610226565b806392716054146106e057806395d89b41146106e857806396cd5536146106f0578063988749d11461072357610226565b80638456cb59116100f95780638456cb59146105db57806386575e40146105e35780638d1fdf2f146106a55780638da5cb5b146106d857610226565b8063715018a61461055f57806379ba50971461056757806379cc67901461056f5780637f3c7b04146105a857610226565b8063313ce567116101bd57806345c8b1a61161018c5780635c975abb116101715780635c975abb146104f15780636960d024146104f957806370a082311461052c57610226565b806345c8b1a6146104b657806353a47bb7146104e957610226565b8063313ce5671461041e578063395093511461043c5780633f4ba83a1461047557806340c10f191461047d57610226565b806318160ddd116101f957806318160ddd1461035b57806323b872dd146103755780632c4d4d18146103b85780632cd271e7146103eb57610226565b806306fdde031461022b57806307546172146102a8578063095ea7b3146102d95780631627540c14610326575b600080fd5b610233610813565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561026d578181015183820152602001610255565b50505050905090810190601f16801561029a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102b06108be565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610312600480360360408110156102ef57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356108da565b604080519115158252519081900360200190f35b6103596004803603602081101561033c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610b7e565b005b610363610c52565b60408051918252519081900360200190f35b6103126004803603606081101561038b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610c58565b610359600480360360208110156103ce57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166110d0565b6103596004803603602081101561040157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166111dd565b6104266112ea565b6040805160ff9092168252519081900360200190f35b6103126004803603604081101561045257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356112ef565b61035961163d565b6103596004803603604081101561049357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135611734565b610359600480360360208110156104cc57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611ab7565b6102b0611d27565b610312611d43565b6103596004803603602081101561050f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611d4c565b6103636004803603602081101561054257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611e59565b610359611eff565b610359611ffe565b6103596004803603604081101561058557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135612144565b610359600480360360208110156105be57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166123e2565b610359612957565b610359600480360360408110156105f957600080fd5b81019060208101813564010000000081111561061457600080fd5b82018360208201111561062657600080fd5b8035906020019184600183028401116401000000008311171561064857600080fd5b91939092909160208101903564010000000081111561066657600080fd5b82018360208201111561067857600080fd5b8035906020019184600183028401116401000000008311171561069a57600080fd5b509092509050612a51565b610359600480360360208110156106bb57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612bc6565b6102b0612e34565b6102b0612e55565b610233612e71565b6103596004803603602081101561070657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612ee7565b6103596004803603602081101561073957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16613000565b6102b0613382565b6103126004803603604081101561077457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561339e565b610312600480360360408110156107ad57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356135b0565b610363600480360360408110156107e657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516613849565b6102b06138f8565b60018054604080516020600284861615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156108b65780601f1061088b576101008083540402835291602001916108b6565b820191906000526020600020905b81548152906001019060200180831161089957829003601f168201915b505050505081565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60045460009060ff161561094f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815233600482018190529151919273ffffffffffffffffffffffffffffffffffffffff169163b062307491602480820192602092909190829003018186803b1580156109c257600080fd5b505afa1580156109d6573d6000803e3d6000fd5b505050506040513d60208110156109ec57600080fd5b505115610a5a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808816600483015291518793929092169163b062307491602480820192602092909190829003018186803b158015610ad057600080fd5b505afa158015610ae4573d6000803e3d6000fd5b505050506040513d6020811015610afa57600080fd5b505115610b6857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b610b73338686613915565b506001949350505050565b600454610100900473ffffffffffffffffffffffffffffffffffffffff16338114610c0a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b50600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60035481565b60045460009060ff1615610ccd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815233600482018190529151919273ffffffffffffffffffffffffffffffffffffffff169163b062307491602480820192602092909190829003018186803b158015610d4057600080fd5b505afa158015610d54573d6000803e3d6000fd5b505050506040513d6020811015610d6a57600080fd5b505115610dd857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808916600483015291518893929092169163b062307491602480820192602092909190829003018186803b158015610e4e57600080fd5b505afa158015610e62573d6000803e3d6000fd5b505050506040513d6020811015610e7857600080fd5b505115610ee657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808916600483015291518893929092169163b062307491602480820192602092909190829003018186803b158015610f5c57600080fd5b505afa158015610f70573d6000803e3d6000fd5b505050506040513d6020811015610f8657600080fd5b505115610ff457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b610fff878787613b05565b600054604080517f5c65816500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808b166004830152336024830181905292516110c3948c94936110be938c93921691635c65816591604480820192602092909190829003018186803b15801561108657600080fd5b505afa15801561109a573d6000803e3d6000fd5b505050506040513d60208110156110b057600080fd5b50519063ffffffff613cfb16565b613915565b5060019695505050505050565b60055460045473ffffffffffffffffffffffffffffffffffffffff918216913361010090920416148061111857503373ffffffffffffffffffffffffffffffffffffffff8216145b61116d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613f5a602b913960400191505060405180910390fd5b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040517fb6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a42590600090a25050565b60065460045473ffffffffffffffffffffffffffffffffffffffff918216913361010090920416148061122557503373ffffffffffffffffffffffffffffffffffffffff8216145b61127a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613f5a602b913960400191505060405180910390fd5b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040517fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a60490600090a25050565b601281565b60045460009060ff161561136457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815233600482018190529151919273ffffffffffffffffffffffffffffffffffffffff169163b062307491602480820192602092909190829003018186803b1580156113d757600080fd5b505afa1580156113eb573d6000803e3d6000fd5b505050506040513d602081101561140157600080fd5b50511561146f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808816600483015291518793929092169163b062307491602480820192602092909190829003018186803b1580156114e557600080fd5b505afa1580156114f9573d6000803e3d6000fd5b505050506040513d602081101561150f57600080fd5b50511561157d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517f5c658165000000000000000000000000000000000000000000000000000000008152336004820181905273ffffffffffffffffffffffffffffffffffffffff808a1660248401529251610b739491938a936110be938b93921691635c65816591604480820192602092909190829003018186803b15801561160557600080fd5b505afa158015611619573d6000803e3d6000fd5b505050506040513d602081101561162f57600080fd5b50519063ffffffff613d1016565b60065473ffffffffffffffffffffffffffffffffffffffff163381146116c457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560065460405173ffffffffffffffffffffffffffffffffffffffff909116907f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90600090a250565b60045460ff16156117a657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808616600483015291518593929092169163b062307491602480820192602092909190829003018186803b15801561181c57600080fd5b505afa158015611830573d6000803e3d6000fd5b505050506040513d602081101561184657600080fd5b5051156118b457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b60055473ffffffffffffffffffffffffffffffffffffffff1633811461193b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff84166119bd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f63616e2774206d696e7420746f2061646472657373207a65726f000000000000604482015290519081900360640190fd5b6003546119d0908463ffffffff613d1016565b60035560008054604080517f21e5383a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015260248201889052915191909216926321e5383a926044808201939182900301818387803b158015611a4b57600080fd5b505af1158015611a5f573d6000803e3d6000fd5b505060408051868152905173ffffffffffffffffffffffffffffffffffffffff88169350600092507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350505050565b60075473ffffffffffffffffffffffffffffffffffffffff16338114611b3e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b60008054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301529151919092169163b0623074916024808301926020929190829003018186803b158015611bb257600080fd5b505afa158015611bc6573d6000803e3d6000fd5b505050506040513d6020811015611bdc57600080fd5b505111611c4a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6163636f756e74206e6f742066726f7a656e0000000000000000000000000000604482015290519081900360640190fd5b60008054604080517fb65dc41300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018590529151919092169263b65dc413926044808201939182900301818387803b158015611cc257600080fd5b505af1158015611cd6573d6000803e3d6000fd5b505060075460405173ffffffffffffffffffffffffffffffffffffffff868116945090911691507f295f47d48ca3de5c5214af57c89859243090803a47bbca8a4bbe6231a77067b490600090a35050565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b60045460ff1681565b60075460045473ffffffffffffffffffffffffffffffffffffffff9182169133610100909204161480611d9457503373ffffffffffffffffffffffffffffffffffffffff8216145b611de9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613f5a602b913960400191505060405180910390fd5b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040517f97feb20f655745f67bbd05465394b86626eaafbbaae4a509a838c19237ea9da390600090a25050565b60008054604080517fe3d670d700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529151919092169163e3d670d7916024808301926020929190829003018186803b158015611ecd57600080fd5b505afa158015611ee1573d6000803e3d6000fd5b505050506040513d6020811015611ef757600080fd5b505192915050565b600454610100900473ffffffffffffffffffffffffffffffffffffffff16338114611f8b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b600480547fffffffffffffffffffffff0000000000000000000000000000000000000000ff169081905560405161010090910473ffffffffffffffffffffffffffffffffffffffff16907fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf3690600090a250565b60085460045473ffffffffffffffffffffffffffffffffffffffff918216913361010090920416148061204657503373ffffffffffffffffffffffffffffffffffffffff8216145b61209b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613f5a602b913960400191505060405180910390fd5b600454610100900473ffffffffffffffffffffffffffffffffffffffff1633146120eb5760405133907fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf3690600090a25b50600480547fffffffffffffffffffffff0000000000000000000000000000000000000000ff163361010002179055600880547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60045460ff16156121b657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808616600483015291518593929092169163b062307491602480820192602092909190829003018186803b15801561222c57600080fd5b505afa158015612240573d6000803e3d6000fd5b505050506040513d602081101561225657600080fd5b5051156122c457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b60055473ffffffffffffffffffffffffffffffffffffffff1633811461234b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b6123558484613d29565b600054604080517f5c65816500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8088166004830152336024830181905292516123dc948994936110be938a93921691635c65816591604480820192602092909190829003018186803b15801561108657600080fd5b50505050565b600454610100900473ffffffffffffffffffffffffffffffffffffffff1633811461246e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b60008290508073ffffffffffffffffffffffffffffffffffffffff1663fb5689666040518163ffffffff1660e01b815260040160206040518083038186803b1580156124b957600080fd5b505afa1580156124cd573d6000803e3d6000fd5b505050506040513d60208110156124e357600080fd5b5051600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316178155604080517f79ba50970000000000000000000000000000000000000000000000000000000081529051928416926379ba50979260048084019391929182900301818387803b15801561257757600080fd5b505af115801561258b573d6000803e3d6000fd5b5050604080517f96cd5536000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff851693506396cd55369250602480830192600092919082900301818387803b1580156125fc57600080fd5b505af1158015612610573d6000803e3d6000fd5b5050604080517f2cd271e7000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff85169350632cd271e79250602480830192600092919082900301818387803b15801561268157600080fd5b505af1158015612695573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156126e157600080fd5b505af11580156126f5573d6000803e3d6000fd5b5050600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055505060065460405173ffffffffffffffffffffffffffffffffffffffff909116907f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90600090a2604080517f2c4d4d18000000000000000000000000000000000000000000000000000000008152600060048201819052915173ffffffffffffffffffffffffffffffffffffffff841692632c4d4d18926024808201939182900301818387803b1580156127d257600080fd5b505af11580156127e6573d6000803e3d6000fd5b5050604080517f2cd271e7000000000000000000000000000000000000000000000000000000008152600060048201819052915173ffffffffffffffffffffffffffffffffffffffff86169450632cd271e793506024808301939282900301818387803b15801561285657600080fd5b505af115801561286a573d6000803e3d6000fd5b5050604080517f6960d024000000000000000000000000000000000000000000000000000000008152600060048201819052915173ffffffffffffffffffffffffffffffffffffffff86169450636960d02493506024808301939282900301818387803b1580156128da57600080fd5b505af11580156128ee573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663715018a66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561293a57600080fd5b505af115801561294e573d6000803e3d6000fd5b50505050505050565b60065473ffffffffffffffffffffffffffffffffffffffff163381146129de57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560065460405173ffffffffffffffffffffffffffffffffffffffff909116907f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890600090a250565b600454610100900473ffffffffffffffffffffffffffffffffffffffff16338114612add57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b612ae960018686613ea3565b50612af660028484613ea3565b507f6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a858585856040518080602001806020018381038352878782818152602001925080828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690910184810383528581526020019050858580828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169092018290039850909650505050505050a15050505050565b60075473ffffffffffffffffffffffffffffffffffffffff16338114612c4d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529151919092169163b0623074916024808301926020929190829003018186803b158015612cc057600080fd5b505afa158015612cd4573d6000803e3d6000fd5b505050506040513d6020811015612cea57600080fd5b505115612d5857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6163636f756e7420616c72656164792066726f7a656e00000000000000000000604482015290519081900360640190fd5b60008054604080517fb65dc41300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301524260248301529151919092169263b65dc413926044808201939182900301818387803b158015612dcf57600080fd5b505af1158015612de3573d6000803e3d6000fd5b505060075460405173ffffffffffffffffffffffffffffffffffffffff868116945090911691507ff0906ec3b3af5007c736f1174c73ff022e930e45637fbdbc797f05ea613474de90600090a35050565b600454610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b600280546040805160206001841615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01909316849004601f810184900484028201840190925281815292918301828280156108b65780601f1061088b576101008083540402835291602001916108b6565b600454610100900473ffffffffffffffffffffffffffffffffffffffff16338114612f7357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b60008054604080517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301529151919092169263f2fde38b926024808201939182900301818387803b158015612fe457600080fd5b505af1158015612ff8573d6000803e3d6000fd5b505050505050565b60075473ffffffffffffffffffffffffffffffffffffffff1633811461308757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b60008054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301529151919092169163b0623074916024808301926020929190829003018186803b1580156130fb57600080fd5b505afa15801561310f573d6000803e3d6000fd5b505050506040513d602081101561312557600080fd5b50511161319357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f63616e6e6f74207769706520756e66726f7a656e206163636f756e7400000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015291514293929092169163b062307491602480820192602092909190829003018186803b15801561320957600080fd5b505afa15801561321d573d6000803e3d6000fd5b505050506040513d602081101561323357600080fd5b50516224ea000110613290576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180613f856029913960400191505060405180910390fd5b600054604080517fe3d670d700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80861660048301529151613337938693169163e3d670d7916024808301926020929190829003018186803b15801561330657600080fd5b505afa15801561331a573d6000803e3d6000fd5b505050506040513d602081101561333057600080fd5b5051613d29565b60075460405173ffffffffffffffffffffffffffffffffffffffff8085169216907faa7ccaa635252f24fc5a4665e7c4a8af5aa588c2e60d326c1196a0e4d2d59f2c90600090a35050565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60045460009060ff161561341357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815233600482018190529151919273ffffffffffffffffffffffffffffffffffffffff169163b062307491602480820192602092909190829003018186803b15801561348657600080fd5b505afa15801561349a573d6000803e3d6000fd5b505050506040513d60208110156134b057600080fd5b50511561351e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517f5c658165000000000000000000000000000000000000000000000000000000008152336004820181905273ffffffffffffffffffffffffffffffffffffffff808916602484015292516135a694919389936110be938a93921691635c65816591604480820192602092909190829003018186803b15801561108657600080fd5b5060019392505050565b60045460009060ff161561362557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815233600482018190529151919273ffffffffffffffffffffffffffffffffffffffff169163b062307491602480820192602092909190829003018186803b15801561369857600080fd5b505afa1580156136ac573d6000803e3d6000fd5b505050506040513d60208110156136c257600080fd5b50511561373057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808816600483015291518793929092169163b062307491602480820192602092909190829003018186803b1580156137a657600080fd5b505afa1580156137ba573d6000803e3d6000fd5b505050506040513d60208110156137d057600080fd5b50511561383e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b610b73338686613b05565b60008054604080517f5c65816500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152858116602483015291519190921691635c658165916044808301926020929190829003018186803b1580156138c557600080fd5b505afa1580156138d9573d6000803e3d6000fd5b505050506040513d60208110156138ef57600080fd5b50519392505050565b60005473ffffffffffffffffffffffffffffffffffffffff165b90565b73ffffffffffffffffffffffffffffffffffffffff821661399757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f7370656e6465722063616e6e6f742062652061646472657373207a65726f0000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8316613a1957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f686f6c6465722063616e6e6f742062652061646472657373207a65726f000000604482015290519081900360640190fd5b60008054604080517f33dd1b8a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152868116602483015260448201869052915191909216926333dd1b8a926064808201939182900301818387803b158015613a9957600080fd5b505af1158015613aad573d6000803e3d6000fd5b505060408051848152905173ffffffffffffffffffffffffffffffffffffffff8087169450871692507f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259181900360200190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8216613b8757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f63616e2774207472616e7366657220746f2061646472657373207a65726f0000604482015290519081900360640190fd5b60008054604080517fcf8eeb7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018690529151919092169263cf8eeb7e926044808201939182900301818387803b158015613bff57600080fd5b505af1158015613c13573d6000803e3d6000fd5b505060008054604080517f21e5383a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301526024820188905291519190921694506321e5383a93506044808301939282900301818387803b158015613c8f57600080fd5b505af1158015613ca3573d6000803e3d6000fd5b505060408051848152905173ffffffffffffffffffffffffffffffffffffffff8087169450871692507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3505050565b600082821115613d0a57600080fd5b50900390565b600082820183811015613d2257600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8216613dab57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f63616e2774206275726e2066726f6d2061646472657373207a65726f00000000604482015290519081900360640190fd5b600354613dbe908263ffffffff613cfb16565b60035560008054604080517fcf8eeb7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529151919092169263cf8eeb7e926044808201939182900301818387803b158015613e3957600080fd5b505af1158015613e4d573d6000803e3d6000fd5b50506040805184815290516000935073ffffffffffffffffffffffffffffffffffffffff861692507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613f02578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555613f2f565b82800160010185558215613f2f579182015b82811115613f2f578235825591602001919060010190613f14565b50613f3b929150613f3f565b5090565b61391291905b80821115613f3b5760008155600101613f4556fe756e617574686f72697a65643a206e6f7420726f6c6520686f6c64657220616e64206e6f74206f776e657263616e6e6f7420776970652066726f7a656e206163636f756e74206265666f72652034207765656b73a165627a7a7230582008f072af8e7b610dbadbee60ce33141ee4575f6ee529975a1c9a0c15580568390029608060405234801561001057600080fd5b50604051602080610aa18339810180604052602081101561003057600080fd5b5051600080546001600160a01b03199081163317909155600180546001600160a01b0390931692909116919091179055610a328061006f6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063b062307411610081578063e30443bc1161005b578063e30443bc146102b5578063e3d670d7146102ee578063f2fde38b14610321576100d4565b8063b062307414610210578063b65dc41314610243578063cf8eeb7e1461027c576100d4565b80635c658165116100b25780635c658165146101885780638babf203146101d55780638da5cb5b14610208576100d4565b80631554611f146100d957806321e5383a1461010a57806333dd1b8a14610145575b600080fd5b6100e1610354565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101436004803603604081101561012057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610370565b005b6101436004803603606081101561015b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610459565b6101c36004803603604081101561019e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610518565b60408051918252519081900360200190f35b610143600480360360208110156101eb57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610535565b6100e1610649565b6101c36004803603602081101561022657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610665565b6101436004803603604081101561025957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610677565b6101436004803603604081101561029257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610726565b610143600480360360408110156102cb57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356107e2565b6101c36004803603602081101561030457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610891565b6101436004803603602081101561033757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108a3565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103f657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6f6e6c794f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602052604090205461042c908263ffffffff6109d816565b73ffffffffffffffffffffffffffffffffffffffff90921660009081526002602052604090209190915550565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104df57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6f6e6c794f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff92831660009081526003602090815260408083209490951682529290925291902055565b600360209081526000928352604080842090915290825290205481565b60015473ffffffffffffffffffffffffffffffffffffffff1633146105bb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6e6f7420617574686f72697a6564000000000000000000000000000000000000604482015290519081900360640190fd5b60015460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f089af7288b55770a7c1dfd40b9d9e464c64031c45326c0916854814b6c16da2890600090a3600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60046020526000908152604090205481565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106fd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6f6e6c794f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff909116600090815260046020526040902055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6f6e6c794f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602052604090205461042c908263ffffffff6109f116565b60005473ffffffffffffffffffffffffffffffffffffffff16331461086857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6f6e6c794f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff909116600090815260026020526040902055565b60026020526000908152604090205481565b60005473ffffffffffffffffffffffffffffffffffffffff163314806108e0575060015473ffffffffffffffffffffffffffffffffffffffff1633145b61094b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6e6f7420617574686f72697a6564000000000000000000000000000000000000604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000828201838110156109ea57600080fd5b9392505050565b600082821115610a0057600080fd5b5090039056fea165627a7a723058204bc74c48fb390e610769130c77a273560d7da13e74a9535cc15af9133e51e99d0029`

// DeployReserveDollarV2 deploys a new Ethereum contract, binding an instance of ReserveDollarV2 to it.
func DeployReserveDollarV2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ReserveDollarV2, error) {
	parsed, err := abi.JSON(strings.NewReader(ReserveDollarV2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ReserveDollarV2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ReserveDollarV2{ReserveDollarV2Caller: ReserveDollarV2Caller{contract: contract}, ReserveDollarV2Transactor: ReserveDollarV2Transactor{contract: contract}, ReserveDollarV2Filterer: ReserveDollarV2Filterer{contract: contract}}, nil
}

// ReserveDollarV2 is an auto generated Go binding around an Ethereum contract.
type ReserveDollarV2 struct {
	ReserveDollarV2Caller     // Read-only binding to the contract
	ReserveDollarV2Transactor // Write-only binding to the contract
	ReserveDollarV2Filterer   // Log filterer for contract events
}

// ReserveDollarV2Caller is an auto generated read-only Go binding around an Ethereum contract.
type ReserveDollarV2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReserveDollarV2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ReserveDollarV2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReserveDollarV2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ReserveDollarV2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReserveDollarV2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ReserveDollarV2Session struct {
	Contract     *ReserveDollarV2  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ReserveDollarV2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ReserveDollarV2CallerSession struct {
	Contract *ReserveDollarV2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ReserveDollarV2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ReserveDollarV2TransactorSession struct {
	Contract     *ReserveDollarV2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ReserveDollarV2Raw is an auto generated low-level Go binding around an Ethereum contract.
type ReserveDollarV2Raw struct {
	Contract *ReserveDollarV2 // Generic contract binding to access the raw methods on
}

// ReserveDollarV2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ReserveDollarV2CallerRaw struct {
	Contract *ReserveDollarV2Caller // Generic read-only contract binding to access the raw methods on
}

// ReserveDollarV2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ReserveDollarV2TransactorRaw struct {
	Contract *ReserveDollarV2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewReserveDollarV2 creates a new instance of ReserveDollarV2, bound to a specific deployed contract.
func NewReserveDollarV2(address common.Address, backend bind.ContractBackend) (*ReserveDollarV2, error) {
	contract, err := bindReserveDollarV2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2{ReserveDollarV2Caller: ReserveDollarV2Caller{contract: contract}, ReserveDollarV2Transactor: ReserveDollarV2Transactor{contract: contract}, ReserveDollarV2Filterer: ReserveDollarV2Filterer{contract: contract}}, nil
}

// NewReserveDollarV2Caller creates a new read-only instance of ReserveDollarV2, bound to a specific deployed contract.
func NewReserveDollarV2Caller(address common.Address, caller bind.ContractCaller) (*ReserveDollarV2Caller, error) {
	contract, err := bindReserveDollarV2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2Caller{contract: contract}, nil
}

// NewReserveDollarV2Transactor creates a new write-only instance of ReserveDollarV2, bound to a specific deployed contract.
func NewReserveDollarV2Transactor(address common.Address, transactor bind.ContractTransactor) (*ReserveDollarV2Transactor, error) {
	contract, err := bindReserveDollarV2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2Transactor{contract: contract}, nil
}

// NewReserveDollarV2Filterer creates a new log filterer instance of ReserveDollarV2, bound to a specific deployed contract.
func NewReserveDollarV2Filterer(address common.Address, filterer bind.ContractFilterer) (*ReserveDollarV2Filterer, error) {
	contract, err := bindReserveDollarV2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2Filterer{contract: contract}, nil
}

// bindReserveDollarV2 binds a generic wrapper to an already deployed contract.
func bindReserveDollarV2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ReserveDollarV2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReserveDollarV2 *ReserveDollarV2Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ReserveDollarV2.Contract.ReserveDollarV2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReserveDollarV2 *ReserveDollarV2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ReserveDollarV2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReserveDollarV2 *ReserveDollarV2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ReserveDollarV2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReserveDollarV2 *ReserveDollarV2CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ReserveDollarV2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReserveDollarV2 *ReserveDollarV2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReserveDollarV2 *ReserveDollarV2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address holder, address spender) constant returns(uint256)
func (_ReserveDollarV2 *ReserveDollarV2Caller) Allowance(opts *bind.CallOpts, holder common.Address, spender common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "allowance", holder, spender)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address holder, address spender) constant returns(uint256)
func (_ReserveDollarV2 *ReserveDollarV2Session) Allowance(holder common.Address, spender common.Address) (*big.Int, error) {
	return _ReserveDollarV2.Contract.Allowance(&_ReserveDollarV2.CallOpts, holder, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address holder, address spender) constant returns(uint256)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) Allowance(holder common.Address, spender common.Address) (*big.Int, error) {
	return _ReserveDollarV2.Contract.Allowance(&_ReserveDollarV2.CallOpts, holder, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address holder) constant returns(uint256)
func (_ReserveDollarV2 *ReserveDollarV2Caller) BalanceOf(opts *bind.CallOpts, holder common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "balanceOf", holder)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address holder) constant returns(uint256)
func (_ReserveDollarV2 *ReserveDollarV2Session) BalanceOf(holder common.Address) (*big.Int, error) {
	return _ReserveDollarV2.Contract.BalanceOf(&_ReserveDollarV2.CallOpts, holder)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address holder) constant returns(uint256)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) BalanceOf(holder common.Address) (*big.Int, error) {
	return _ReserveDollarV2.Contract.BalanceOf(&_ReserveDollarV2.CallOpts, holder)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_ReserveDollarV2 *ReserveDollarV2Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "decimals")
	return *ret0, err
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_ReserveDollarV2 *ReserveDollarV2Session) Decimals() (uint8, error) {
	return _ReserveDollarV2.Contract.Decimals(&_ReserveDollarV2.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) Decimals() (uint8, error) {
	return _ReserveDollarV2.Contract.Decimals(&_ReserveDollarV2.CallOpts)
}

// Freezer is a free data retrieval call binding the contract method 0x92716054.
//
// Solidity: function freezer() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Caller) Freezer(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "freezer")
	return *ret0, err
}

// Freezer is a free data retrieval call binding the contract method 0x92716054.
//
// Solidity: function freezer() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Session) Freezer() (common.Address, error) {
	return _ReserveDollarV2.Contract.Freezer(&_ReserveDollarV2.CallOpts)
}

// Freezer is a free data retrieval call binding the contract method 0x92716054.
//
// Solidity: function freezer() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) Freezer() (common.Address, error) {
	return _ReserveDollarV2.Contract.Freezer(&_ReserveDollarV2.CallOpts)
}

// GetEternalStorageAddress is a free data retrieval call binding the contract method 0xfb568966.
//
// Solidity: function getEternalStorageAddress() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Caller) GetEternalStorageAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "getEternalStorageAddress")
	return *ret0, err
}

// GetEternalStorageAddress is a free data retrieval call binding the contract method 0xfb568966.
//
// Solidity: function getEternalStorageAddress() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Session) GetEternalStorageAddress() (common.Address, error) {
	return _ReserveDollarV2.Contract.GetEternalStorageAddress(&_ReserveDollarV2.CallOpts)
}

// GetEternalStorageAddress is a free data retrieval call binding the contract method 0xfb568966.
//
// Solidity: function getEternalStorageAddress() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) GetEternalStorageAddress() (common.Address, error) {
	return _ReserveDollarV2.Contract.GetEternalStorageAddress(&_ReserveDollarV2.CallOpts)
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Caller) Minter(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "minter")
	return *ret0, err
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Session) Minter() (common.Address, error) {
	return _ReserveDollarV2.Contract.Minter(&_ReserveDollarV2.CallOpts)
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) Minter() (common.Address, error) {
	return _ReserveDollarV2.Contract.Minter(&_ReserveDollarV2.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_ReserveDollarV2 *ReserveDollarV2Caller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_ReserveDollarV2 *ReserveDollarV2Session) Name() (string, error) {
	return _ReserveDollarV2.Contract.Name(&_ReserveDollarV2.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) Name() (string, error) {
	return _ReserveDollarV2.Contract.Name(&_ReserveDollarV2.CallOpts)
}

// NominatedOwner is a free data retrieval call binding the contract method 0x53a47bb7.
//
// Solidity: function nominatedOwner() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Caller) NominatedOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "nominatedOwner")
	return *ret0, err
}

// NominatedOwner is a free data retrieval call binding the contract method 0x53a47bb7.
//
// Solidity: function nominatedOwner() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Session) NominatedOwner() (common.Address, error) {
	return _ReserveDollarV2.Contract.NominatedOwner(&_ReserveDollarV2.CallOpts)
}

// NominatedOwner is a free data retrieval call binding the contract method 0x53a47bb7.
//
// Solidity: function nominatedOwner() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) NominatedOwner() (common.Address, error) {
	return _ReserveDollarV2.Contract.NominatedOwner(&_ReserveDollarV2.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Session) Owner() (common.Address, error) {
	return _ReserveDollarV2.Contract.Owner(&_ReserveDollarV2.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) Owner() (common.Address, error) {
	return _ReserveDollarV2.Contract.Owner(&_ReserveDollarV2.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Caller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Session) Paused() (bool, error) {
	return _ReserveDollarV2.Contract.Paused(&_ReserveDollarV2.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) Paused() (bool, error) {
	return _ReserveDollarV2.Contract.Paused(&_ReserveDollarV2.CallOpts)
}

// Pauser is a free data retrieval call binding the contract method 0x9fd0506d.
//
// Solidity: function pauser() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Caller) Pauser(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "pauser")
	return *ret0, err
}

// Pauser is a free data retrieval call binding the contract method 0x9fd0506d.
//
// Solidity: function pauser() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Session) Pauser() (common.Address, error) {
	return _ReserveDollarV2.Contract.Pauser(&_ReserveDollarV2.CallOpts)
}

// Pauser is a free data retrieval call binding the contract method 0x9fd0506d.
//
// Solidity: function pauser() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) Pauser() (common.Address, error) {
	return _ReserveDollarV2.Contract.Pauser(&_ReserveDollarV2.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_ReserveDollarV2 *ReserveDollarV2Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "symbol")
	return *ret0, err
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_ReserveDollarV2 *ReserveDollarV2Session) Symbol() (string, error) {
	return _ReserveDollarV2.Contract.Symbol(&_ReserveDollarV2.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) Symbol() (string, error) {
	return _ReserveDollarV2.Contract.Symbol(&_ReserveDollarV2.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_ReserveDollarV2 *ReserveDollarV2Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_ReserveDollarV2 *ReserveDollarV2Session) TotalSupply() (*big.Int, error) {
	return _ReserveDollarV2.Contract.TotalSupply(&_ReserveDollarV2.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) TotalSupply() (*big.Int, error) {
	return _ReserveDollarV2.Contract.TotalSupply(&_ReserveDollarV2.CallOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "acceptOwnership")
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) AcceptOwnership() (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.AcceptOwnership(&_ReserveDollarV2.TransactOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.AcceptOwnership(&_ReserveDollarV2.TransactOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Transactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Session) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Approve(&_ReserveDollarV2.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Approve(&_ReserveDollarV2.TransactOpts, spender, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) BurnFrom(opts *bind.TransactOpts, account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "burnFrom", account, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) BurnFrom(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.BurnFrom(&_ReserveDollarV2.TransactOpts, account, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) BurnFrom(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.BurnFrom(&_ReserveDollarV2.TransactOpts, account, value)
}

// ChangeFreezer is a paid mutator transaction binding the contract method 0x6960d024.
//
// Solidity: function changeFreezer(address newFreezer) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) ChangeFreezer(opts *bind.TransactOpts, newFreezer common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "changeFreezer", newFreezer)
}

// ChangeFreezer is a paid mutator transaction binding the contract method 0x6960d024.
//
// Solidity: function changeFreezer(address newFreezer) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) ChangeFreezer(newFreezer common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ChangeFreezer(&_ReserveDollarV2.TransactOpts, newFreezer)
}

// ChangeFreezer is a paid mutator transaction binding the contract method 0x6960d024.
//
// Solidity: function changeFreezer(address newFreezer) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) ChangeFreezer(newFreezer common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ChangeFreezer(&_ReserveDollarV2.TransactOpts, newFreezer)
}

// ChangeMinter is a paid mutator transaction binding the contract method 0x2c4d4d18.
//
// Solidity: function changeMinter(address newMinter) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) ChangeMinter(opts *bind.TransactOpts, newMinter common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "changeMinter", newMinter)
}

// ChangeMinter is a paid mutator transaction binding the contract method 0x2c4d4d18.
//
// Solidity: function changeMinter(address newMinter) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) ChangeMinter(newMinter common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ChangeMinter(&_ReserveDollarV2.TransactOpts, newMinter)
}

// ChangeMinter is a paid mutator transaction binding the contract method 0x2c4d4d18.
//
// Solidity: function changeMinter(address newMinter) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) ChangeMinter(newMinter common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ChangeMinter(&_ReserveDollarV2.TransactOpts, newMinter)
}

// ChangeName is a paid mutator transaction binding the contract method 0x86575e40.
//
// Solidity: function changeName(string newName, string newSymbol) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) ChangeName(opts *bind.TransactOpts, newName string, newSymbol string) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "changeName", newName, newSymbol)
}

// ChangeName is a paid mutator transaction binding the contract method 0x86575e40.
//
// Solidity: function changeName(string newName, string newSymbol) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) ChangeName(newName string, newSymbol string) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ChangeName(&_ReserveDollarV2.TransactOpts, newName, newSymbol)
}

// ChangeName is a paid mutator transaction binding the contract method 0x86575e40.
//
// Solidity: function changeName(string newName, string newSymbol) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) ChangeName(newName string, newSymbol string) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ChangeName(&_ReserveDollarV2.TransactOpts, newName, newSymbol)
}

// ChangePauser is a paid mutator transaction binding the contract method 0x2cd271e7.
//
// Solidity: function changePauser(address newPauser) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) ChangePauser(opts *bind.TransactOpts, newPauser common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "changePauser", newPauser)
}

// ChangePauser is a paid mutator transaction binding the contract method 0x2cd271e7.
//
// Solidity: function changePauser(address newPauser) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) ChangePauser(newPauser common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ChangePauser(&_ReserveDollarV2.TransactOpts, newPauser)
}

// ChangePauser is a paid mutator transaction binding the contract method 0x2cd271e7.
//
// Solidity: function changePauser(address newPauser) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) ChangePauser(newPauser common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ChangePauser(&_ReserveDollarV2.TransactOpts, newPauser)
}

// CompleteHandoff is a paid mutator transaction binding the contract method 0x7f3c7b04.
//
// Solidity: function completeHandoff(address previousImplementation) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) CompleteHandoff(opts *bind.TransactOpts, previousImplementation common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "completeHandoff", previousImplementation)
}

// CompleteHandoff is a paid mutator transaction binding the contract method 0x7f3c7b04.
//
// Solidity: function completeHandoff(address previousImplementation) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) CompleteHandoff(previousImplementation common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.CompleteHandoff(&_ReserveDollarV2.TransactOpts, previousImplementation)
}

// CompleteHandoff is a paid mutator transaction binding the contract method 0x7f3c7b04.
//
// Solidity: function completeHandoff(address previousImplementation) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) CompleteHandoff(previousImplementation common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.CompleteHandoff(&_ReserveDollarV2.TransactOpts, previousImplementation)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Transactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Session) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.DecreaseAllowance(&_ReserveDollarV2.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.DecreaseAllowance(&_ReserveDollarV2.TransactOpts, spender, subtractedValue)
}

// Freeze is a paid mutator transaction binding the contract method 0x8d1fdf2f.
//
// Solidity: function freeze(address account) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) Freeze(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "freeze", account)
}

// Freeze is a paid mutator transaction binding the contract method 0x8d1fdf2f.
//
// Solidity: function freeze(address account) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) Freeze(account common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Freeze(&_ReserveDollarV2.TransactOpts, account)
}

// Freeze is a paid mutator transaction binding the contract method 0x8d1fdf2f.
//
// Solidity: function freeze(address account) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) Freeze(account common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Freeze(&_ReserveDollarV2.TransactOpts, account)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Transactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Session) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.IncreaseAllowance(&_ReserveDollarV2.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.IncreaseAllowance(&_ReserveDollarV2.TransactOpts, spender, addedValue)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 value) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) Mint(opts *bind.TransactOpts, account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "mint", account, value)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 value) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) Mint(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Mint(&_ReserveDollarV2.TransactOpts, account, value)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 value) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) Mint(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Mint(&_ReserveDollarV2.TransactOpts, account, value)
}

// NominateNewOwner is a paid mutator transaction binding the contract method 0x1627540c.
//
// Solidity: function nominateNewOwner(address nominee) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) NominateNewOwner(opts *bind.TransactOpts, nominee common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "nominateNewOwner", nominee)
}

// NominateNewOwner is a paid mutator transaction binding the contract method 0x1627540c.
//
// Solidity: function nominateNewOwner(address nominee) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) NominateNewOwner(nominee common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.NominateNewOwner(&_ReserveDollarV2.TransactOpts, nominee)
}

// NominateNewOwner is a paid mutator transaction binding the contract method 0x1627540c.
//
// Solidity: function nominateNewOwner(address nominee) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) NominateNewOwner(nominee common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.NominateNewOwner(&_ReserveDollarV2.TransactOpts, nominee)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) Pause() (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Pause(&_ReserveDollarV2.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) Pause() (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Pause(&_ReserveDollarV2.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) RenounceOwnership() (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.RenounceOwnership(&_ReserveDollarV2.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.RenounceOwnership(&_ReserveDollarV2.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Transactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Session) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Transfer(&_ReserveDollarV2.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Transfer(&_ReserveDollarV2.TransactOpts, to, value)
}

// TransferEternalStorage is a paid mutator transaction binding the contract method 0x96cd5536.
//
// Solidity: function transferEternalStorage(address newOwner) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) TransferEternalStorage(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "transferEternalStorage", newOwner)
}

// TransferEternalStorage is a paid mutator transaction binding the contract method 0x96cd5536.
//
// Solidity: function transferEternalStorage(address newOwner) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) TransferEternalStorage(newOwner common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.TransferEternalStorage(&_ReserveDollarV2.TransactOpts, newOwner)
}

// TransferEternalStorage is a paid mutator transaction binding the contract method 0x96cd5536.
//
// Solidity: function transferEternalStorage(address newOwner) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) TransferEternalStorage(newOwner common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.TransferEternalStorage(&_ReserveDollarV2.TransactOpts, newOwner)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Session) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.TransferFrom(&_ReserveDollarV2.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.TransferFrom(&_ReserveDollarV2.TransactOpts, from, to, value)
}

// Unfreeze is a paid mutator transaction binding the contract method 0x45c8b1a6.
//
// Solidity: function unfreeze(address account) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) Unfreeze(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "unfreeze", account)
}

// Unfreeze is a paid mutator transaction binding the contract method 0x45c8b1a6.
//
// Solidity: function unfreeze(address account) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) Unfreeze(account common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Unfreeze(&_ReserveDollarV2.TransactOpts, account)
}

// Unfreeze is a paid mutator transaction binding the contract method 0x45c8b1a6.
//
// Solidity: function unfreeze(address account) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) Unfreeze(account common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Unfreeze(&_ReserveDollarV2.TransactOpts, account)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) Unpause() (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Unpause(&_ReserveDollarV2.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) Unpause() (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Unpause(&_ReserveDollarV2.TransactOpts)
}

// Wipe is a paid mutator transaction binding the contract method 0x988749d1.
//
// Solidity: function wipe(address account) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) Wipe(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "wipe", account)
}

// Wipe is a paid mutator transaction binding the contract method 0x988749d1.
//
// Solidity: function wipe(address account) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) Wipe(account common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Wipe(&_ReserveDollarV2.TransactOpts, account)
}

// Wipe is a paid mutator transaction binding the contract method 0x988749d1.
//
// Solidity: function wipe(address account) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) Wipe(account common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Wipe(&_ReserveDollarV2.TransactOpts, account)
}

// ReserveDollarV2ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ReserveDollarV2 contract.
type ReserveDollarV2ApprovalIterator struct {
	Event *ReserveDollarV2Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2Approval represents a Approval event raised by the ReserveDollarV2 contract.
type ReserveDollarV2Approval struct {
	Holder  common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed holder, address indexed spender, uint256 value)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterApproval(opts *bind.FilterOpts, holder []common.Address, spender []common.Address) (*ReserveDollarV2ApprovalIterator, error) {

	var holderRule []interface{}
	for _, holderItem := range holder {
		holderRule = append(holderRule, holderItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "Approval", holderRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2ApprovalIterator{contract: _ReserveDollarV2.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed holder, address indexed spender, uint256 value)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2Approval, holder []common.Address, spender []common.Address) (event.Subscription, error) {

	var holderRule []interface{}
	for _, holderItem := range holder {
		holderRule = append(holderRule, holderItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "Approval", holderRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2Approval)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2FreezerChangedIterator is returned from FilterFreezerChanged and is used to iterate over the raw logs and unpacked data for FreezerChanged events raised by the ReserveDollarV2 contract.
type ReserveDollarV2FreezerChangedIterator struct {
	Event *ReserveDollarV2FreezerChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2FreezerChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2FreezerChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2FreezerChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2FreezerChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2FreezerChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2FreezerChanged represents a FreezerChanged event raised by the ReserveDollarV2 contract.
type ReserveDollarV2FreezerChanged struct {
	NewFreezer common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterFreezerChanged is a free log retrieval operation binding the contract event 0x97feb20f655745f67bbd05465394b86626eaafbbaae4a509a838c19237ea9da3.
//
// Solidity: event FreezerChanged(address indexed newFreezer)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterFreezerChanged(opts *bind.FilterOpts, newFreezer []common.Address) (*ReserveDollarV2FreezerChangedIterator, error) {

	var newFreezerRule []interface{}
	for _, newFreezerItem := range newFreezer {
		newFreezerRule = append(newFreezerRule, newFreezerItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "FreezerChanged", newFreezerRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2FreezerChangedIterator{contract: _ReserveDollarV2.contract, event: "FreezerChanged", logs: logs, sub: sub}, nil
}

// WatchFreezerChanged is a free log subscription operation binding the contract event 0x97feb20f655745f67bbd05465394b86626eaafbbaae4a509a838c19237ea9da3.
//
// Solidity: event FreezerChanged(address indexed newFreezer)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchFreezerChanged(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2FreezerChanged, newFreezer []common.Address) (event.Subscription, error) {

	var newFreezerRule []interface{}
	for _, newFreezerItem := range newFreezer {
		newFreezerRule = append(newFreezerRule, newFreezerItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "FreezerChanged", newFreezerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2FreezerChanged)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "FreezerChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2FrozenIterator is returned from FilterFrozen and is used to iterate over the raw logs and unpacked data for Frozen events raised by the ReserveDollarV2 contract.
type ReserveDollarV2FrozenIterator struct {
	Event *ReserveDollarV2Frozen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2FrozenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2Frozen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2Frozen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2FrozenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2FrozenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2Frozen represents a Frozen event raised by the ReserveDollarV2 contract.
type ReserveDollarV2Frozen struct {
	Freezer common.Address
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterFrozen is a free log retrieval operation binding the contract event 0xf0906ec3b3af5007c736f1174c73ff022e930e45637fbdbc797f05ea613474de.
//
// Solidity: event Frozen(address indexed freezer, address indexed account)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterFrozen(opts *bind.FilterOpts, freezer []common.Address, account []common.Address) (*ReserveDollarV2FrozenIterator, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "Frozen", freezerRule, accountRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2FrozenIterator{contract: _ReserveDollarV2.contract, event: "Frozen", logs: logs, sub: sub}, nil
}

// WatchFrozen is a free log subscription operation binding the contract event 0xf0906ec3b3af5007c736f1174c73ff022e930e45637fbdbc797f05ea613474de.
//
// Solidity: event Frozen(address indexed freezer, address indexed account)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchFrozen(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2Frozen, freezer []common.Address, account []common.Address) (event.Subscription, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "Frozen", freezerRule, accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2Frozen)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "Frozen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2MinterChangedIterator is returned from FilterMinterChanged and is used to iterate over the raw logs and unpacked data for MinterChanged events raised by the ReserveDollarV2 contract.
type ReserveDollarV2MinterChangedIterator struct {
	Event *ReserveDollarV2MinterChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2MinterChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2MinterChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2MinterChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2MinterChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2MinterChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2MinterChanged represents a MinterChanged event raised by the ReserveDollarV2 contract.
type ReserveDollarV2MinterChanged struct {
	NewMinter common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMinterChanged is a free log retrieval operation binding the contract event 0xb6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a425.
//
// Solidity: event MinterChanged(address indexed newMinter)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterMinterChanged(opts *bind.FilterOpts, newMinter []common.Address) (*ReserveDollarV2MinterChangedIterator, error) {

	var newMinterRule []interface{}
	for _, newMinterItem := range newMinter {
		newMinterRule = append(newMinterRule, newMinterItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "MinterChanged", newMinterRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2MinterChangedIterator{contract: _ReserveDollarV2.contract, event: "MinterChanged", logs: logs, sub: sub}, nil
}

// WatchMinterChanged is a free log subscription operation binding the contract event 0xb6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a425.
//
// Solidity: event MinterChanged(address indexed newMinter)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchMinterChanged(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2MinterChanged, newMinter []common.Address) (event.Subscription, error) {

	var newMinterRule []interface{}
	for _, newMinterItem := range newMinter {
		newMinterRule = append(newMinterRule, newMinterItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "MinterChanged", newMinterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2MinterChanged)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "MinterChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2NameChangedIterator is returned from FilterNameChanged and is used to iterate over the raw logs and unpacked data for NameChanged events raised by the ReserveDollarV2 contract.
type ReserveDollarV2NameChangedIterator struct {
	Event *ReserveDollarV2NameChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2NameChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2NameChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2NameChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2NameChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2NameChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2NameChanged represents a NameChanged event raised by the ReserveDollarV2 contract.
type ReserveDollarV2NameChanged struct {
	NewName   string
	NewSymbol string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNameChanged is a free log retrieval operation binding the contract event 0x6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a.
//
// Solidity: event NameChanged(string newName, string newSymbol)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterNameChanged(opts *bind.FilterOpts) (*ReserveDollarV2NameChangedIterator, error) {

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "NameChanged")
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2NameChangedIterator{contract: _ReserveDollarV2.contract, event: "NameChanged", logs: logs, sub: sub}, nil
}

// WatchNameChanged is a free log subscription operation binding the contract event 0x6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a.
//
// Solidity: event NameChanged(string newName, string newSymbol)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchNameChanged(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2NameChanged) (event.Subscription, error) {

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "NameChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2NameChanged)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "NameChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2OwnerChangedIterator is returned from FilterOwnerChanged and is used to iterate over the raw logs and unpacked data for OwnerChanged events raised by the ReserveDollarV2 contract.
type ReserveDollarV2OwnerChangedIterator struct {
	Event *ReserveDollarV2OwnerChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2OwnerChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2OwnerChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2OwnerChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2OwnerChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2OwnerChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2OwnerChanged represents a OwnerChanged event raised by the ReserveDollarV2 contract.
type ReserveDollarV2OwnerChanged struct {
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOwnerChanged is a free log retrieval operation binding the contract event 0xa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36.
//
// Solidity: event OwnerChanged(address indexed newOwner)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterOwnerChanged(opts *bind.FilterOpts, newOwner []common.Address) (*ReserveDollarV2OwnerChangedIterator, error) {

	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "OwnerChanged", newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2OwnerChangedIterator{contract: _ReserveDollarV2.contract, event: "OwnerChanged", logs: logs, sub: sub}, nil
}

// WatchOwnerChanged is a free log subscription operation binding the contract event 0xa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36.
//
// Solidity: event OwnerChanged(address indexed newOwner)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchOwnerChanged(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2OwnerChanged, newOwner []common.Address) (event.Subscription, error) {

	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "OwnerChanged", newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2OwnerChanged)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "OwnerChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2PausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ReserveDollarV2 contract.
type ReserveDollarV2PausedIterator struct {
	Event *ReserveDollarV2Paused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2PausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2PausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2Paused represents a Paused event raised by the ReserveDollarV2 contract.
type ReserveDollarV2Paused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address indexed account)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*ReserveDollarV2PausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2PausedIterator{contract: _ReserveDollarV2.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address indexed account)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2Paused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2Paused)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2PauserChangedIterator is returned from FilterPauserChanged and is used to iterate over the raw logs and unpacked data for PauserChanged events raised by the ReserveDollarV2 contract.
type ReserveDollarV2PauserChangedIterator struct {
	Event *ReserveDollarV2PauserChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2PauserChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2PauserChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2PauserChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2PauserChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2PauserChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2PauserChanged represents a PauserChanged event raised by the ReserveDollarV2 contract.
type ReserveDollarV2PauserChanged struct {
	NewPauser common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterPauserChanged is a free log retrieval operation binding the contract event 0xb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604.
//
// Solidity: event PauserChanged(address indexed newPauser)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterPauserChanged(opts *bind.FilterOpts, newPauser []common.Address) (*ReserveDollarV2PauserChangedIterator, error) {

	var newPauserRule []interface{}
	for _, newPauserItem := range newPauser {
		newPauserRule = append(newPauserRule, newPauserItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "PauserChanged", newPauserRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2PauserChangedIterator{contract: _ReserveDollarV2.contract, event: "PauserChanged", logs: logs, sub: sub}, nil
}

// WatchPauserChanged is a free log subscription operation binding the contract event 0xb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604.
//
// Solidity: event PauserChanged(address indexed newPauser)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchPauserChanged(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2PauserChanged, newPauser []common.Address) (event.Subscription, error) {

	var newPauserRule []interface{}
	for _, newPauserItem := range newPauser {
		newPauserRule = append(newPauserRule, newPauserItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "PauserChanged", newPauserRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2PauserChanged)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "PauserChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ReserveDollarV2 contract.
type ReserveDollarV2TransferIterator struct {
	Event *ReserveDollarV2Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2Transfer represents a Transfer event raised by the ReserveDollarV2 contract.
type ReserveDollarV2Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ReserveDollarV2TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2TransferIterator{contract: _ReserveDollarV2.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2Transfer)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2UnfrozenIterator is returned from FilterUnfrozen and is used to iterate over the raw logs and unpacked data for Unfrozen events raised by the ReserveDollarV2 contract.
type ReserveDollarV2UnfrozenIterator struct {
	Event *ReserveDollarV2Unfrozen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2UnfrozenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2Unfrozen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2Unfrozen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2UnfrozenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2UnfrozenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2Unfrozen represents a Unfrozen event raised by the ReserveDollarV2 contract.
type ReserveDollarV2Unfrozen struct {
	Freezer common.Address
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnfrozen is a free log retrieval operation binding the contract event 0x295f47d48ca3de5c5214af57c89859243090803a47bbca8a4bbe6231a77067b4.
//
// Solidity: event Unfrozen(address indexed freezer, address indexed account)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterUnfrozen(opts *bind.FilterOpts, freezer []common.Address, account []common.Address) (*ReserveDollarV2UnfrozenIterator, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "Unfrozen", freezerRule, accountRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2UnfrozenIterator{contract: _ReserveDollarV2.contract, event: "Unfrozen", logs: logs, sub: sub}, nil
}

// WatchUnfrozen is a free log subscription operation binding the contract event 0x295f47d48ca3de5c5214af57c89859243090803a47bbca8a4bbe6231a77067b4.
//
// Solidity: event Unfrozen(address indexed freezer, address indexed account)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchUnfrozen(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2Unfrozen, freezer []common.Address, account []common.Address) (event.Subscription, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "Unfrozen", freezerRule, accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2Unfrozen)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "Unfrozen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2UnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ReserveDollarV2 contract.
type ReserveDollarV2UnpausedIterator struct {
	Event *ReserveDollarV2Unpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2UnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2UnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2Unpaused represents a Unpaused event raised by the ReserveDollarV2 contract.
type ReserveDollarV2Unpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address indexed account)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*ReserveDollarV2UnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2UnpausedIterator{contract: _ReserveDollarV2.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address indexed account)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2Unpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2Unpaused)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2WipedIterator is returned from FilterWiped and is used to iterate over the raw logs and unpacked data for Wiped events raised by the ReserveDollarV2 contract.
type ReserveDollarV2WipedIterator struct {
	Event *ReserveDollarV2Wiped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2WipedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2Wiped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2Wiped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2WipedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2WipedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2Wiped represents a Wiped event raised by the ReserveDollarV2 contract.
type ReserveDollarV2Wiped struct {
	Freezer common.Address
	Wiped   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWiped is a free log retrieval operation binding the contract event 0xaa7ccaa635252f24fc5a4665e7c4a8af5aa588c2e60d326c1196a0e4d2d59f2c.
//
// Solidity: event Wiped(address indexed freezer, address indexed wiped)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterWiped(opts *bind.FilterOpts, freezer []common.Address, wiped []common.Address) (*ReserveDollarV2WipedIterator, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var wipedRule []interface{}
	for _, wipedItem := range wiped {
		wipedRule = append(wipedRule, wipedItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "Wiped", freezerRule, wipedRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2WipedIterator{contract: _ReserveDollarV2.contract, event: "Wiped", logs: logs, sub: sub}, nil
}

// WatchWiped is a free log subscription operation binding the contract event 0xaa7ccaa635252f24fc5a4665e7c4a8af5aa588c2e60d326c1196a0e4d2d59f2c.
//
// Solidity: event Wiped(address indexed freezer, address indexed wiped)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchWiped(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2Wiped, freezer []common.Address, wiped []common.Address) (event.Subscription, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var wipedRule []interface{}
	for _, wipedItem := range wiped {
		wipedRule = append(wipedRule, wipedItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "Wiped", freezerRule, wipedRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2Wiped)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "Wiped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
