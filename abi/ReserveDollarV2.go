// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ReserveDollarV2ABI is the input ABI used to generate the binding from.
const ReserveDollarV2ABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nominee\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"changeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"changePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFreezer\",\"type\":\"address\"}],\"name\":\"changeFreezer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"previousImplementation\",\"type\":\"address\"}],\"name\":\"completeHandoff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"},{\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferEternalStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"wipe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEternalStorageAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newFreezer\",\"type\":\"address\"}],\"name\":\"FreezerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"freezer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Frozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"freezer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"freezer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"wiped\",\"type\":\"address\"}],\"name\":\"Wiped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]"

// ReserveDollarV2Bin is the compiled bytecode used for deploying new contracts.
const ReserveDollarV2Bin = `60c0604052600e60808190527f5265736572766520446f6c6c617200000000000000000000000000000000000060a090815262000040916001919062000129565b506040805180820190915260048082527f52535644000000000000000000000000000000000000000000000000000000006020909201918252620000879160029162000129565b503480156200009557600080fd5b5033604051620000a590620001ae565b600160a060020a03909116815260405190819003602001906000f080158015620000d3573d6000803e3d6000fd5b5060008054600160a060020a0319908116600160a060020a039390931692909217905560048054600680543394168417905561010060a860020a0319166101009092029190911760ff19166001179055620001dc565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016c57805160ff19168380011785556200019c565b828001600101855582156200019c579182015b828111156200019c5782518255916020019190600101906200017f565b50620001aa929150620001bc565b5090565b610ac0806200424883390190565b620001d991905b80821115620001aa5760008155600101620001c3565b90565b61405c80620001ec6000396000f3fe608060405234801561001057600080fd5b5060043610610243576000357c010000000000000000000000000000000000000000000000000000000090048063715018a61161014757806392716054116100da5780639fd0506d116100a9578063a9059cbb1161008e578063a9059cbb146107b4578063dd62ed3e146107ed578063fb5689661461082857610243565b80639fd0506d14610773578063a457c2d71461077b57610243565b806392716054146106fd57806395d89b411461070557806396cd55361461070d578063988749d11461074057610243565b80638456cb59116101165780638456cb59146105f857806386575e40146106005780638d1fdf2f146106c25780638da5cb5b146106f557610243565b8063715018a61461057c57806379ba50971461058457806379cc67901461058c5780637f3c7b04146105c557610243565b8063313ce567116101da57806345c8b1a6116101a95780635c975abb1161018e5780635c975abb1461050e5780636960d0241461051657806370a082311461054957610243565b806345c8b1a6146104d357806353a47bb71461050657610243565b8063313ce5671461043b57806339509351146104595780633f4ba83a1461049257806340c10f191461049a57610243565b806318160ddd1161021657806318160ddd1461037857806323b872dd146103925780632c4d4d18146103d55780632cd271e71461040857610243565b806306fdde031461024857806307546172146102c5578063095ea7b3146102f65780631627540c14610343575b600080fd5b610250610830565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561028a578181015183820152602001610272565b50505050905090810190601f1680156102b75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102cd6108db565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61032f6004803603604081101561030c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356108f7565b604080519115158252519081900360200190f35b6103766004803603602081101561035957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610b9b565b005b610380610c6f565b60408051918252519081900360200190f35b61032f600480360360608110156103a857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610c75565b610376600480360360208110156103eb57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166110ed565b6103766004803603602081101561041e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166111fc565b61044361130b565b6040805160ff9092168252519081900360200190f35b61032f6004803603604081101561046f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135611310565b61037661165e565b610376600480360360408110156104b057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135611755565b610376600480360360208110156104e957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611ada565b6102cd611d4a565b61032f611d66565b6103766004803603602081101561052c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611d6f565b6103806004803603602081101561055f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611e7e565b610376611f24565b610376612023565b610376600480360360408110156105a257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561216b565b610376600480360360208110156105db57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612409565b6103766129d2565b6103766004803603604081101561061657600080fd5b81019060208101813564010000000081111561063157600080fd5b82018360208201111561064357600080fd5b8035906020019184600183028401116401000000008311171561066557600080fd5b91939092909160208101903564010000000081111561068357600080fd5b82018360208201111561069557600080fd5b803590602001918460018302840111640100000000831117156106b757600080fd5b509092509050612acc565b610376600480360360208110156106d857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612c41565b6102cd612eaf565b6102cd612ed0565b610250612eec565b6103766004803603602081101561072357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612f62565b6103766004803603602081101561075657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661307b565b6102cd6133fd565b61032f6004803603604081101561079157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135613419565b61032f600480360360408110156107ca57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561362b565b6103806004803603604081101561080357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166138c4565b6102cd613973565b60018054604080516020600284861615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156108d35780601f106108a8576101008083540402835291602001916108d3565b820191906000526020600020905b8154815290600101906020018083116108b657829003601f168201915b505050505081565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60045460009060ff161561096c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815233600482018190529151919273ffffffffffffffffffffffffffffffffffffffff169163b062307491602480820192602092909190829003018186803b1580156109df57600080fd5b505afa1580156109f3573d6000803e3d6000fd5b505050506040513d6020811015610a0957600080fd5b505115610a7757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808816600483015291518793929092169163b062307491602480820192602092909190829003018186803b158015610aed57600080fd5b505afa158015610b01573d6000803e3d6000fd5b505050506040513d6020811015610b1757600080fd5b505115610b8557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b610b90338686613990565b506001949350505050565b600454610100900473ffffffffffffffffffffffffffffffffffffffff16338114610c2757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b50600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60035481565b60045460009060ff1615610cea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815233600482018190529151919273ffffffffffffffffffffffffffffffffffffffff169163b062307491602480820192602092909190829003018186803b158015610d5d57600080fd5b505afa158015610d71573d6000803e3d6000fd5b505050506040513d6020811015610d8757600080fd5b505115610df557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808916600483015291518893929092169163b062307491602480820192602092909190829003018186803b158015610e6b57600080fd5b505afa158015610e7f573d6000803e3d6000fd5b505050506040513d6020811015610e9557600080fd5b505115610f0357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808916600483015291518893929092169163b062307491602480820192602092909190829003018186803b158015610f7957600080fd5b505afa158015610f8d573d6000803e3d6000fd5b505050506040513d6020811015610fa357600080fd5b50511561101157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b61101c878787613b84565b600054604080517f5c65816500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808b166004830152336024830181905292516110e0948c94936110db938c93921691635c65816591604480820192602092909190829003018186803b1580156110a357600080fd5b505afa1580156110b7573d6000803e3d6000fd5b505050506040513d60208110156110cd57600080fd5b50519063ffffffff613d7c16565b613990565b5060019695505050505050565b60055460045473ffffffffffffffffffffffffffffffffffffffff918216913361010090920416148061113557503373ffffffffffffffffffffffffffffffffffffffff8216145b151561118c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613fdd602b913960400191505060405180910390fd5b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040517fb6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a42590600090a25050565b60065460045473ffffffffffffffffffffffffffffffffffffffff918216913361010090920416148061124457503373ffffffffffffffffffffffffffffffffffffffff8216145b151561129b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613fdd602b913960400191505060405180910390fd5b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040517fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a60490600090a25050565b601281565b60045460009060ff161561138557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815233600482018190529151919273ffffffffffffffffffffffffffffffffffffffff169163b062307491602480820192602092909190829003018186803b1580156113f857600080fd5b505afa15801561140c573d6000803e3d6000fd5b505050506040513d602081101561142257600080fd5b50511561149057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808816600483015291518793929092169163b062307491602480820192602092909190829003018186803b15801561150657600080fd5b505afa15801561151a573d6000803e3d6000fd5b505050506040513d602081101561153057600080fd5b50511561159e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517f5c658165000000000000000000000000000000000000000000000000000000008152336004820181905273ffffffffffffffffffffffffffffffffffffffff808a1660248401529251610b909491938a936110db938b93921691635c65816591604480820192602092909190829003018186803b15801561162657600080fd5b505afa15801561163a573d6000803e3d6000fd5b505050506040513d602081101561165057600080fd5b50519063ffffffff613d9116565b60065473ffffffffffffffffffffffffffffffffffffffff163381146116e557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560065460405173ffffffffffffffffffffffffffffffffffffffff909116907f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90600090a250565b60045460ff16156117c757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808616600483015291518593929092169163b062307491602480820192602092909190829003018186803b15801561183d57600080fd5b505afa158015611851573d6000803e3d6000fd5b505050506040513d602081101561186757600080fd5b5051156118d557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b60055473ffffffffffffffffffffffffffffffffffffffff1633811461195c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff841615156119e057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f63616e2774206d696e7420746f2061646472657373207a65726f000000000000604482015290519081900360640190fd5b6003546119f3908463ffffffff613d9116565b60035560008054604080517f21e5383a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015260248201889052915191909216926321e5383a926044808201939182900301818387803b158015611a6e57600080fd5b505af1158015611a82573d6000803e3d6000fd5b505060408051868152905173ffffffffffffffffffffffffffffffffffffffff88169350600092507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350505050565b60075473ffffffffffffffffffffffffffffffffffffffff16338114611b6157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b60008054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301529151919092169163b0623074916024808301926020929190829003018186803b158015611bd557600080fd5b505afa158015611be9573d6000803e3d6000fd5b505050506040513d6020811015611bff57600080fd5b505111611c6d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6163636f756e74206e6f742066726f7a656e0000000000000000000000000000604482015290519081900360640190fd5b60008054604080517fb65dc41300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018590529151919092169263b65dc413926044808201939182900301818387803b158015611ce557600080fd5b505af1158015611cf9573d6000803e3d6000fd5b505060075460405173ffffffffffffffffffffffffffffffffffffffff868116945090911691507f295f47d48ca3de5c5214af57c89859243090803a47bbca8a4bbe6231a77067b490600090a35050565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b60045460ff1681565b60075460045473ffffffffffffffffffffffffffffffffffffffff9182169133610100909204161480611db757503373ffffffffffffffffffffffffffffffffffffffff8216145b1515611e0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613fdd602b913960400191505060405180910390fd5b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040517f97feb20f655745f67bbd05465394b86626eaafbbaae4a509a838c19237ea9da390600090a25050565b60008054604080517fe3d670d700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529151919092169163e3d670d7916024808301926020929190829003018186803b158015611ef257600080fd5b505afa158015611f06573d6000803e3d6000fd5b505050506040513d6020811015611f1c57600080fd5b505192915050565b600454610100900473ffffffffffffffffffffffffffffffffffffffff16338114611fb057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b600480547fffffffffffffffffffffff0000000000000000000000000000000000000000ff169081905560405161010090910473ffffffffffffffffffffffffffffffffffffffff16907fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf3690600090a250565b60085460045473ffffffffffffffffffffffffffffffffffffffff918216913361010090920416148061206b57503373ffffffffffffffffffffffffffffffffffffffff8216145b15156120c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613fdd602b913960400191505060405180910390fd5b600454610100900473ffffffffffffffffffffffffffffffffffffffff1633146121125760405133907fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf3690600090a25b50600480547fffffffffffffffffffffff0000000000000000000000000000000000000000ff163361010002179055600880547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60045460ff16156121dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808616600483015291518593929092169163b062307491602480820192602092909190829003018186803b15801561225357600080fd5b505afa158015612267573d6000803e3d6000fd5b505050506040513d602081101561227d57600080fd5b5051156122eb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b60055473ffffffffffffffffffffffffffffffffffffffff1633811461237257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b61237c8484613daa565b600054604080517f5c65816500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808816600483015233602483018190529251612403948994936110db938a93921691635c65816591604480820192602092909190829003018186803b1580156110a357600080fd5b50505050565b600454610100900473ffffffffffffffffffffffffffffffffffffffff1633811461249557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b60008290508073ffffffffffffffffffffffffffffffffffffffff1663fb5689666040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156124fc57600080fd5b505afa158015612510573d6000803e3d6000fd5b505050506040513d602081101561252657600080fd5b5051600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316178155604080517f79ba50970000000000000000000000000000000000000000000000000000000081529051928416926379ba50979260048084019391929182900301818387803b1580156125ba57600080fd5b505af11580156125ce573d6000803e3d6000fd5b5050604080517f96cd5536000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff851693506396cd55369250602480830192600092919082900301818387803b15801561263f57600080fd5b505af1158015612653573d6000803e3d6000fd5b5050604080517f2cd271e7000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff85169350632cd271e79250602480830192600092919082900301818387803b1580156126c457600080fd5b505af11580156126d8573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638456cb596040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561274057600080fd5b505af1158015612754573d6000803e3d6000fd5b5050600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055505060065460405173ffffffffffffffffffffffffffffffffffffffff909116907f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90600090a2604080517f2c4d4d18000000000000000000000000000000000000000000000000000000008152600060048201819052915173ffffffffffffffffffffffffffffffffffffffff841692632c4d4d18926024808201939182900301818387803b15801561283157600080fd5b505af1158015612845573d6000803e3d6000fd5b5050604080517f2cd271e7000000000000000000000000000000000000000000000000000000008152600060048201819052915173ffffffffffffffffffffffffffffffffffffffff86169450632cd271e793506024808301939282900301818387803b1580156128b557600080fd5b505af11580156128c9573d6000803e3d6000fd5b5050604080517f6960d024000000000000000000000000000000000000000000000000000000008152600060048201819052915173ffffffffffffffffffffffffffffffffffffffff86169450636960d02493506024808301939282900301818387803b15801561293957600080fd5b505af115801561294d573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663715018a66040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156129b557600080fd5b505af11580156129c9573d6000803e3d6000fd5b50505050505050565b60065473ffffffffffffffffffffffffffffffffffffffff16338114612a5957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560065460405173ffffffffffffffffffffffffffffffffffffffff909116907f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890600090a250565b600454610100900473ffffffffffffffffffffffffffffffffffffffff16338114612b5857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b612b6460018686613f26565b50612b7160028484613f26565b507f6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a858585856040518080602001806020018381038352878782818152602001925080828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690910184810383528581526020019050858580828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169092018290039850909650505050505050a15050505050565b60075473ffffffffffffffffffffffffffffffffffffffff16338114612cc857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529151919092169163b0623074916024808301926020929190829003018186803b158015612d3b57600080fd5b505afa158015612d4f573d6000803e3d6000fd5b505050506040513d6020811015612d6557600080fd5b505115612dd357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6163636f756e7420616c72656164792066726f7a656e00000000000000000000604482015290519081900360640190fd5b60008054604080517fb65dc41300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301524260248301529151919092169263b65dc413926044808201939182900301818387803b158015612e4a57600080fd5b505af1158015612e5e573d6000803e3d6000fd5b505060075460405173ffffffffffffffffffffffffffffffffffffffff868116945090911691507ff0906ec3b3af5007c736f1174c73ff022e930e45637fbdbc797f05ea613474de90600090a35050565b600454610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b600280546040805160206001841615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01909316849004601f810184900484028201840190925281815292918301828280156108d35780601f106108a8576101008083540402835291602001916108d3565b600454610100900473ffffffffffffffffffffffffffffffffffffffff16338114612fee57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b60008054604080517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301529151919092169263f2fde38b926024808201939182900301818387803b15801561305f57600080fd5b505af1158015613073573d6000803e3d6000fd5b505050505050565b60075473ffffffffffffffffffffffffffffffffffffffff1633811461310257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b60008054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301529151919092169163b0623074916024808301926020929190829003018186803b15801561317657600080fd5b505afa15801561318a573d6000803e3d6000fd5b505050506040513d60208110156131a057600080fd5b50511161320e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f63616e6e6f74207769706520756e66726f7a656e206163636f756e7400000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015291514293929092169163b062307491602480820192602092909190829003018186803b15801561328457600080fd5b505afa158015613298573d6000803e3d6000fd5b505050506040513d60208110156132ae57600080fd5b50516224ea00011061330b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806140086029913960400191505060405180910390fd5b600054604080517fe3d670d700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808616600483015291516133b2938693169163e3d670d7916024808301926020929190829003018186803b15801561338157600080fd5b505afa158015613395573d6000803e3d6000fd5b505050506040513d60208110156133ab57600080fd5b5051613daa565b60075460405173ffffffffffffffffffffffffffffffffffffffff8085169216907faa7ccaa635252f24fc5a4665e7c4a8af5aa588c2e60d326c1196a0e4d2d59f2c90600090a35050565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60045460009060ff161561348e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815233600482018190529151919273ffffffffffffffffffffffffffffffffffffffff169163b062307491602480820192602092909190829003018186803b15801561350157600080fd5b505afa158015613515573d6000803e3d6000fd5b505050506040513d602081101561352b57600080fd5b50511561359957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517f5c658165000000000000000000000000000000000000000000000000000000008152336004820181905273ffffffffffffffffffffffffffffffffffffffff8089166024840152925161362194919389936110db938a93921691635c65816591604480820192602092909190829003018186803b1580156110a357600080fd5b5060019392505050565b60045460009060ff16156136a057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815233600482018190529151919273ffffffffffffffffffffffffffffffffffffffff169163b062307491602480820192602092909190829003018186803b15801561371357600080fd5b505afa158015613727573d6000803e3d6000fd5b505050506040513d602081101561373d57600080fd5b5051156137ab57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808816600483015291518793929092169163b062307491602480820192602092909190829003018186803b15801561382157600080fd5b505afa158015613835573d6000803e3d6000fd5b505050506040513d602081101561384b57600080fd5b5051156138b957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b610b90338686613b84565b60008054604080517f5c65816500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152858116602483015291519190921691635c658165916044808301926020929190829003018186803b15801561394057600080fd5b505afa158015613954573d6000803e3d6000fd5b505050506040513d602081101561396a57600080fd5b50519392505050565b60005473ffffffffffffffffffffffffffffffffffffffff165b90565b73ffffffffffffffffffffffffffffffffffffffff82161515613a1457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f7370656e6465722063616e6e6f742062652061646472657373207a65726f0000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff83161515613a9857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f686f6c6465722063616e6e6f742062652061646472657373207a65726f000000604482015290519081900360640190fd5b60008054604080517f33dd1b8a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152868116602483015260448201869052915191909216926333dd1b8a926064808201939182900301818387803b158015613b1857600080fd5b505af1158015613b2c573d6000803e3d6000fd5b505060408051848152905173ffffffffffffffffffffffffffffffffffffffff8087169450871692507f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259181900360200190a3505050565b73ffffffffffffffffffffffffffffffffffffffff82161515613c0857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f63616e2774207472616e7366657220746f2061646472657373207a65726f0000604482015290519081900360640190fd5b60008054604080517fcf8eeb7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018690529151919092169263cf8eeb7e926044808201939182900301818387803b158015613c8057600080fd5b505af1158015613c94573d6000803e3d6000fd5b505060008054604080517f21e5383a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301526024820188905291519190921694506321e5383a93506044808301939282900301818387803b158015613d1057600080fd5b505af1158015613d24573d6000803e3d6000fd5b505060408051848152905173ffffffffffffffffffffffffffffffffffffffff8087169450871692507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3505050565b600082821115613d8b57600080fd5b50900390565b600082820183811015613da357600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff82161515613e2e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f63616e2774206275726e2066726f6d2061646472657373207a65726f00000000604482015290519081900360640190fd5b600354613e41908263ffffffff613d7c16565b60035560008054604080517fcf8eeb7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529151919092169263cf8eeb7e926044808201939182900301818387803b158015613ebc57600080fd5b505af1158015613ed0573d6000803e3d6000fd5b50506040805184815290516000935073ffffffffffffffffffffffffffffffffffffffff861692507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613f85578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555613fb2565b82800160010185558215613fb2579182015b82811115613fb2578235825591602001919060010190613f97565b50613fbe929150613fc2565b5090565b61398d91905b80821115613fbe5760008155600101613fc856fe756e617574686f72697a65643a206e6f7420726f6c6520686f6c64657220616e64206e6f74206f776e657263616e6e6f7420776970652066726f7a656e206163636f756e74206265666f72652034207765656b73a165627a7a72305820aac494d1139aafd9d74a168b7fac578aee3d9a6ab4734b427171c20ebf872b460029608060405234801561001057600080fd5b50604051602080610ac08339810180604052602081101561003057600080fd5b505160008054600160a060020a0319908116331790915560018054600160a060020a0390931692909116919091179055610a518061006f6000396000f3fe608060405234801561001057600080fd5b50600436106100f1576000357c010000000000000000000000000000000000000000000000000000000090048063b06230741161009e578063e30443bc11610078578063e30443bc146102d2578063e3d670d71461030b578063f2fde38b1461033e576100f1565b8063b06230741461022d578063b65dc41314610260578063cf8eeb7e14610299576100f1565b80635c658165116100cf5780635c658165146101a55780638babf203146101f25780638da5cb5b14610225576100f1565b80631554611f146100f657806321e5383a1461012757806333dd1b8a14610162575b600080fd5b6100fe610371565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101606004803603604081101561013d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561038d565b005b6101606004803603606081101561017857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610476565b6101e0600480360360408110156101bb57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610535565b60408051918252519081900360200190f35b6101606004803603602081101561020857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610552565b6100fe610666565b6101e06004803603602081101561024357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610682565b6101606004803603604081101561027657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610694565b610160600480360360408110156102af57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610743565b610160600480360360408110156102e857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356107ff565b6101e06004803603602081101561032157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108ae565b6101606004803603602081101561035457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108c0565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff16331461041357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6f6e6c794f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040902054610449908263ffffffff6109f716565b73ffffffffffffffffffffffffffffffffffffffff90921660009081526002602052604090209190915550565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104fc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6f6e6c794f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff92831660009081526003602090815260408083209490951682529290925291902055565b600360209081526000928352604080842090915290825290205481565b60015473ffffffffffffffffffffffffffffffffffffffff1633146105d857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6e6f7420617574686f72697a6564000000000000000000000000000000000000604482015290519081900360640190fd5b60015460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f089af7288b55770a7c1dfd40b9d9e464c64031c45326c0916854814b6c16da2890600090a3600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60046020526000908152604090205481565b60005473ffffffffffffffffffffffffffffffffffffffff16331461071a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6f6e6c794f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff909116600090815260046020526040902055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107c957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6f6e6c794f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040902054610449908263ffffffff610a1016565b60005473ffffffffffffffffffffffffffffffffffffffff16331461088557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6f6e6c794f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff909116600090815260026020526040902055565b60026020526000908152604090205481565b60005473ffffffffffffffffffffffffffffffffffffffff163314806108fd575060015473ffffffffffffffffffffffffffffffffffffffff1633145b151561096a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6e6f7420617574686f72697a6564000000000000000000000000000000000000604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600082820183811015610a0957600080fd5b9392505050565b600082821115610a1f57600080fd5b5090039056fea165627a7a723058202efbf6c1454b2837c001af8059908ddf7e3f6ca7f20a109d3d8f8d5c6c5ec1c60029`

// DeployReserveDollarV2 deploys a new Ethereum contract, binding an instance of ReserveDollarV2 to it.
func DeployReserveDollarV2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ReserveDollarV2, error) {
	parsed, err := abi.JSON(strings.NewReader(ReserveDollarV2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ReserveDollarV2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ReserveDollarV2{ReserveDollarV2Caller: ReserveDollarV2Caller{contract: contract}, ReserveDollarV2Transactor: ReserveDollarV2Transactor{contract: contract}, ReserveDollarV2Filterer: ReserveDollarV2Filterer{contract: contract}}, nil
}

// ReserveDollarV2 is an auto generated Go binding around an Ethereum contract.
type ReserveDollarV2 struct {
	ReserveDollarV2Caller     // Read-only binding to the contract
	ReserveDollarV2Transactor // Write-only binding to the contract
	ReserveDollarV2Filterer   // Log filterer for contract events
}

// ReserveDollarV2Caller is an auto generated read-only Go binding around an Ethereum contract.
type ReserveDollarV2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReserveDollarV2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ReserveDollarV2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReserveDollarV2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ReserveDollarV2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReserveDollarV2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ReserveDollarV2Session struct {
	Contract     *ReserveDollarV2  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ReserveDollarV2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ReserveDollarV2CallerSession struct {
	Contract *ReserveDollarV2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ReserveDollarV2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ReserveDollarV2TransactorSession struct {
	Contract     *ReserveDollarV2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ReserveDollarV2Raw is an auto generated low-level Go binding around an Ethereum contract.
type ReserveDollarV2Raw struct {
	Contract *ReserveDollarV2 // Generic contract binding to access the raw methods on
}

// ReserveDollarV2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ReserveDollarV2CallerRaw struct {
	Contract *ReserveDollarV2Caller // Generic read-only contract binding to access the raw methods on
}

// ReserveDollarV2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ReserveDollarV2TransactorRaw struct {
	Contract *ReserveDollarV2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewReserveDollarV2 creates a new instance of ReserveDollarV2, bound to a specific deployed contract.
func NewReserveDollarV2(address common.Address, backend bind.ContractBackend) (*ReserveDollarV2, error) {
	contract, err := bindReserveDollarV2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2{ReserveDollarV2Caller: ReserveDollarV2Caller{contract: contract}, ReserveDollarV2Transactor: ReserveDollarV2Transactor{contract: contract}, ReserveDollarV2Filterer: ReserveDollarV2Filterer{contract: contract}}, nil
}

// NewReserveDollarV2Caller creates a new read-only instance of ReserveDollarV2, bound to a specific deployed contract.
func NewReserveDollarV2Caller(address common.Address, caller bind.ContractCaller) (*ReserveDollarV2Caller, error) {
	contract, err := bindReserveDollarV2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2Caller{contract: contract}, nil
}

// NewReserveDollarV2Transactor creates a new write-only instance of ReserveDollarV2, bound to a specific deployed contract.
func NewReserveDollarV2Transactor(address common.Address, transactor bind.ContractTransactor) (*ReserveDollarV2Transactor, error) {
	contract, err := bindReserveDollarV2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2Transactor{contract: contract}, nil
}

// NewReserveDollarV2Filterer creates a new log filterer instance of ReserveDollarV2, bound to a specific deployed contract.
func NewReserveDollarV2Filterer(address common.Address, filterer bind.ContractFilterer) (*ReserveDollarV2Filterer, error) {
	contract, err := bindReserveDollarV2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2Filterer{contract: contract}, nil
}

// bindReserveDollarV2 binds a generic wrapper to an already deployed contract.
func bindReserveDollarV2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ReserveDollarV2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReserveDollarV2 *ReserveDollarV2Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ReserveDollarV2.Contract.ReserveDollarV2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReserveDollarV2 *ReserveDollarV2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ReserveDollarV2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReserveDollarV2 *ReserveDollarV2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ReserveDollarV2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReserveDollarV2 *ReserveDollarV2CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ReserveDollarV2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReserveDollarV2 *ReserveDollarV2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReserveDollarV2 *ReserveDollarV2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address holder, address spender) constant returns(uint256)
func (_ReserveDollarV2 *ReserveDollarV2Caller) Allowance(opts *bind.CallOpts, holder common.Address, spender common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "allowance", holder, spender)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address holder, address spender) constant returns(uint256)
func (_ReserveDollarV2 *ReserveDollarV2Session) Allowance(holder common.Address, spender common.Address) (*big.Int, error) {
	return _ReserveDollarV2.Contract.Allowance(&_ReserveDollarV2.CallOpts, holder, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address holder, address spender) constant returns(uint256)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) Allowance(holder common.Address, spender common.Address) (*big.Int, error) {
	return _ReserveDollarV2.Contract.Allowance(&_ReserveDollarV2.CallOpts, holder, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address holder) constant returns(uint256)
func (_ReserveDollarV2 *ReserveDollarV2Caller) BalanceOf(opts *bind.CallOpts, holder common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "balanceOf", holder)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address holder) constant returns(uint256)
func (_ReserveDollarV2 *ReserveDollarV2Session) BalanceOf(holder common.Address) (*big.Int, error) {
	return _ReserveDollarV2.Contract.BalanceOf(&_ReserveDollarV2.CallOpts, holder)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address holder) constant returns(uint256)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) BalanceOf(holder common.Address) (*big.Int, error) {
	return _ReserveDollarV2.Contract.BalanceOf(&_ReserveDollarV2.CallOpts, holder)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_ReserveDollarV2 *ReserveDollarV2Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "decimals")
	return *ret0, err
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_ReserveDollarV2 *ReserveDollarV2Session) Decimals() (uint8, error) {
	return _ReserveDollarV2.Contract.Decimals(&_ReserveDollarV2.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) Decimals() (uint8, error) {
	return _ReserveDollarV2.Contract.Decimals(&_ReserveDollarV2.CallOpts)
}

// Freezer is a free data retrieval call binding the contract method 0x92716054.
//
// Solidity: function freezer() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Caller) Freezer(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "freezer")
	return *ret0, err
}

// Freezer is a free data retrieval call binding the contract method 0x92716054.
//
// Solidity: function freezer() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Session) Freezer() (common.Address, error) {
	return _ReserveDollarV2.Contract.Freezer(&_ReserveDollarV2.CallOpts)
}

// Freezer is a free data retrieval call binding the contract method 0x92716054.
//
// Solidity: function freezer() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) Freezer() (common.Address, error) {
	return _ReserveDollarV2.Contract.Freezer(&_ReserveDollarV2.CallOpts)
}

// GetEternalStorageAddress is a free data retrieval call binding the contract method 0xfb568966.
//
// Solidity: function getEternalStorageAddress() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Caller) GetEternalStorageAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "getEternalStorageAddress")
	return *ret0, err
}

// GetEternalStorageAddress is a free data retrieval call binding the contract method 0xfb568966.
//
// Solidity: function getEternalStorageAddress() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Session) GetEternalStorageAddress() (common.Address, error) {
	return _ReserveDollarV2.Contract.GetEternalStorageAddress(&_ReserveDollarV2.CallOpts)
}

// GetEternalStorageAddress is a free data retrieval call binding the contract method 0xfb568966.
//
// Solidity: function getEternalStorageAddress() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) GetEternalStorageAddress() (common.Address, error) {
	return _ReserveDollarV2.Contract.GetEternalStorageAddress(&_ReserveDollarV2.CallOpts)
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Caller) Minter(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "minter")
	return *ret0, err
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Session) Minter() (common.Address, error) {
	return _ReserveDollarV2.Contract.Minter(&_ReserveDollarV2.CallOpts)
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) Minter() (common.Address, error) {
	return _ReserveDollarV2.Contract.Minter(&_ReserveDollarV2.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_ReserveDollarV2 *ReserveDollarV2Caller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_ReserveDollarV2 *ReserveDollarV2Session) Name() (string, error) {
	return _ReserveDollarV2.Contract.Name(&_ReserveDollarV2.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) Name() (string, error) {
	return _ReserveDollarV2.Contract.Name(&_ReserveDollarV2.CallOpts)
}

// NominatedOwner is a free data retrieval call binding the contract method 0x53a47bb7.
//
// Solidity: function nominatedOwner() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Caller) NominatedOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "nominatedOwner")
	return *ret0, err
}

// NominatedOwner is a free data retrieval call binding the contract method 0x53a47bb7.
//
// Solidity: function nominatedOwner() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Session) NominatedOwner() (common.Address, error) {
	return _ReserveDollarV2.Contract.NominatedOwner(&_ReserveDollarV2.CallOpts)
}

// NominatedOwner is a free data retrieval call binding the contract method 0x53a47bb7.
//
// Solidity: function nominatedOwner() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) NominatedOwner() (common.Address, error) {
	return _ReserveDollarV2.Contract.NominatedOwner(&_ReserveDollarV2.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Session) Owner() (common.Address, error) {
	return _ReserveDollarV2.Contract.Owner(&_ReserveDollarV2.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) Owner() (common.Address, error) {
	return _ReserveDollarV2.Contract.Owner(&_ReserveDollarV2.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Caller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Session) Paused() (bool, error) {
	return _ReserveDollarV2.Contract.Paused(&_ReserveDollarV2.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) Paused() (bool, error) {
	return _ReserveDollarV2.Contract.Paused(&_ReserveDollarV2.CallOpts)
}

// Pauser is a free data retrieval call binding the contract method 0x9fd0506d.
//
// Solidity: function pauser() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Caller) Pauser(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "pauser")
	return *ret0, err
}

// Pauser is a free data retrieval call binding the contract method 0x9fd0506d.
//
// Solidity: function pauser() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2Session) Pauser() (common.Address, error) {
	return _ReserveDollarV2.Contract.Pauser(&_ReserveDollarV2.CallOpts)
}

// Pauser is a free data retrieval call binding the contract method 0x9fd0506d.
//
// Solidity: function pauser() constant returns(address)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) Pauser() (common.Address, error) {
	return _ReserveDollarV2.Contract.Pauser(&_ReserveDollarV2.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_ReserveDollarV2 *ReserveDollarV2Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "symbol")
	return *ret0, err
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_ReserveDollarV2 *ReserveDollarV2Session) Symbol() (string, error) {
	return _ReserveDollarV2.Contract.Symbol(&_ReserveDollarV2.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) Symbol() (string, error) {
	return _ReserveDollarV2.Contract.Symbol(&_ReserveDollarV2.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_ReserveDollarV2 *ReserveDollarV2Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ReserveDollarV2.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_ReserveDollarV2 *ReserveDollarV2Session) TotalSupply() (*big.Int, error) {
	return _ReserveDollarV2.Contract.TotalSupply(&_ReserveDollarV2.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_ReserveDollarV2 *ReserveDollarV2CallerSession) TotalSupply() (*big.Int, error) {
	return _ReserveDollarV2.Contract.TotalSupply(&_ReserveDollarV2.CallOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "acceptOwnership")
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) AcceptOwnership() (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.AcceptOwnership(&_ReserveDollarV2.TransactOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.AcceptOwnership(&_ReserveDollarV2.TransactOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Transactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Session) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Approve(&_ReserveDollarV2.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Approve(&_ReserveDollarV2.TransactOpts, spender, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) BurnFrom(opts *bind.TransactOpts, account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "burnFrom", account, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) BurnFrom(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.BurnFrom(&_ReserveDollarV2.TransactOpts, account, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) BurnFrom(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.BurnFrom(&_ReserveDollarV2.TransactOpts, account, value)
}

// ChangeFreezer is a paid mutator transaction binding the contract method 0x6960d024.
//
// Solidity: function changeFreezer(address newFreezer) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) ChangeFreezer(opts *bind.TransactOpts, newFreezer common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "changeFreezer", newFreezer)
}

// ChangeFreezer is a paid mutator transaction binding the contract method 0x6960d024.
//
// Solidity: function changeFreezer(address newFreezer) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) ChangeFreezer(newFreezer common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ChangeFreezer(&_ReserveDollarV2.TransactOpts, newFreezer)
}

// ChangeFreezer is a paid mutator transaction binding the contract method 0x6960d024.
//
// Solidity: function changeFreezer(address newFreezer) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) ChangeFreezer(newFreezer common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ChangeFreezer(&_ReserveDollarV2.TransactOpts, newFreezer)
}

// ChangeMinter is a paid mutator transaction binding the contract method 0x2c4d4d18.
//
// Solidity: function changeMinter(address newMinter) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) ChangeMinter(opts *bind.TransactOpts, newMinter common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "changeMinter", newMinter)
}

// ChangeMinter is a paid mutator transaction binding the contract method 0x2c4d4d18.
//
// Solidity: function changeMinter(address newMinter) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) ChangeMinter(newMinter common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ChangeMinter(&_ReserveDollarV2.TransactOpts, newMinter)
}

// ChangeMinter is a paid mutator transaction binding the contract method 0x2c4d4d18.
//
// Solidity: function changeMinter(address newMinter) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) ChangeMinter(newMinter common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ChangeMinter(&_ReserveDollarV2.TransactOpts, newMinter)
}

// ChangeName is a paid mutator transaction binding the contract method 0x86575e40.
//
// Solidity: function changeName(string newName, string newSymbol) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) ChangeName(opts *bind.TransactOpts, newName string, newSymbol string) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "changeName", newName, newSymbol)
}

// ChangeName is a paid mutator transaction binding the contract method 0x86575e40.
//
// Solidity: function changeName(string newName, string newSymbol) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) ChangeName(newName string, newSymbol string) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ChangeName(&_ReserveDollarV2.TransactOpts, newName, newSymbol)
}

// ChangeName is a paid mutator transaction binding the contract method 0x86575e40.
//
// Solidity: function changeName(string newName, string newSymbol) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) ChangeName(newName string, newSymbol string) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ChangeName(&_ReserveDollarV2.TransactOpts, newName, newSymbol)
}

// ChangePauser is a paid mutator transaction binding the contract method 0x2cd271e7.
//
// Solidity: function changePauser(address newPauser) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) ChangePauser(opts *bind.TransactOpts, newPauser common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "changePauser", newPauser)
}

// ChangePauser is a paid mutator transaction binding the contract method 0x2cd271e7.
//
// Solidity: function changePauser(address newPauser) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) ChangePauser(newPauser common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ChangePauser(&_ReserveDollarV2.TransactOpts, newPauser)
}

// ChangePauser is a paid mutator transaction binding the contract method 0x2cd271e7.
//
// Solidity: function changePauser(address newPauser) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) ChangePauser(newPauser common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.ChangePauser(&_ReserveDollarV2.TransactOpts, newPauser)
}

// CompleteHandoff is a paid mutator transaction binding the contract method 0x7f3c7b04.
//
// Solidity: function completeHandoff(address previousImplementation) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) CompleteHandoff(opts *bind.TransactOpts, previousImplementation common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "completeHandoff", previousImplementation)
}

// CompleteHandoff is a paid mutator transaction binding the contract method 0x7f3c7b04.
//
// Solidity: function completeHandoff(address previousImplementation) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) CompleteHandoff(previousImplementation common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.CompleteHandoff(&_ReserveDollarV2.TransactOpts, previousImplementation)
}

// CompleteHandoff is a paid mutator transaction binding the contract method 0x7f3c7b04.
//
// Solidity: function completeHandoff(address previousImplementation) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) CompleteHandoff(previousImplementation common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.CompleteHandoff(&_ReserveDollarV2.TransactOpts, previousImplementation)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Transactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Session) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.DecreaseAllowance(&_ReserveDollarV2.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.DecreaseAllowance(&_ReserveDollarV2.TransactOpts, spender, subtractedValue)
}

// Freeze is a paid mutator transaction binding the contract method 0x8d1fdf2f.
//
// Solidity: function freeze(address account) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) Freeze(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "freeze", account)
}

// Freeze is a paid mutator transaction binding the contract method 0x8d1fdf2f.
//
// Solidity: function freeze(address account) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) Freeze(account common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Freeze(&_ReserveDollarV2.TransactOpts, account)
}

// Freeze is a paid mutator transaction binding the contract method 0x8d1fdf2f.
//
// Solidity: function freeze(address account) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) Freeze(account common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Freeze(&_ReserveDollarV2.TransactOpts, account)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Transactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Session) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.IncreaseAllowance(&_ReserveDollarV2.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.IncreaseAllowance(&_ReserveDollarV2.TransactOpts, spender, addedValue)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 value) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) Mint(opts *bind.TransactOpts, account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "mint", account, value)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 value) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) Mint(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Mint(&_ReserveDollarV2.TransactOpts, account, value)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 value) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) Mint(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Mint(&_ReserveDollarV2.TransactOpts, account, value)
}

// NominateNewOwner is a paid mutator transaction binding the contract method 0x1627540c.
//
// Solidity: function nominateNewOwner(address nominee) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) NominateNewOwner(opts *bind.TransactOpts, nominee common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "nominateNewOwner", nominee)
}

// NominateNewOwner is a paid mutator transaction binding the contract method 0x1627540c.
//
// Solidity: function nominateNewOwner(address nominee) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) NominateNewOwner(nominee common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.NominateNewOwner(&_ReserveDollarV2.TransactOpts, nominee)
}

// NominateNewOwner is a paid mutator transaction binding the contract method 0x1627540c.
//
// Solidity: function nominateNewOwner(address nominee) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) NominateNewOwner(nominee common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.NominateNewOwner(&_ReserveDollarV2.TransactOpts, nominee)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) Pause() (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Pause(&_ReserveDollarV2.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) Pause() (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Pause(&_ReserveDollarV2.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) RenounceOwnership() (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.RenounceOwnership(&_ReserveDollarV2.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.RenounceOwnership(&_ReserveDollarV2.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Transactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Session) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Transfer(&_ReserveDollarV2.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Transfer(&_ReserveDollarV2.TransactOpts, to, value)
}

// TransferEternalStorage is a paid mutator transaction binding the contract method 0x96cd5536.
//
// Solidity: function transferEternalStorage(address newOwner) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) TransferEternalStorage(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "transferEternalStorage", newOwner)
}

// TransferEternalStorage is a paid mutator transaction binding the contract method 0x96cd5536.
//
// Solidity: function transferEternalStorage(address newOwner) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) TransferEternalStorage(newOwner common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.TransferEternalStorage(&_ReserveDollarV2.TransactOpts, newOwner)
}

// TransferEternalStorage is a paid mutator transaction binding the contract method 0x96cd5536.
//
// Solidity: function transferEternalStorage(address newOwner) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) TransferEternalStorage(newOwner common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.TransferEternalStorage(&_ReserveDollarV2.TransactOpts, newOwner)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2Session) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.TransferFrom(&_ReserveDollarV2.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.TransferFrom(&_ReserveDollarV2.TransactOpts, from, to, value)
}

// Unfreeze is a paid mutator transaction binding the contract method 0x45c8b1a6.
//
// Solidity: function unfreeze(address account) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) Unfreeze(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "unfreeze", account)
}

// Unfreeze is a paid mutator transaction binding the contract method 0x45c8b1a6.
//
// Solidity: function unfreeze(address account) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) Unfreeze(account common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Unfreeze(&_ReserveDollarV2.TransactOpts, account)
}

// Unfreeze is a paid mutator transaction binding the contract method 0x45c8b1a6.
//
// Solidity: function unfreeze(address account) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) Unfreeze(account common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Unfreeze(&_ReserveDollarV2.TransactOpts, account)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) Unpause() (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Unpause(&_ReserveDollarV2.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) Unpause() (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Unpause(&_ReserveDollarV2.TransactOpts)
}

// Wipe is a paid mutator transaction binding the contract method 0x988749d1.
//
// Solidity: function wipe(address account) returns()
func (_ReserveDollarV2 *ReserveDollarV2Transactor) Wipe(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.contract.Transact(opts, "wipe", account)
}

// Wipe is a paid mutator transaction binding the contract method 0x988749d1.
//
// Solidity: function wipe(address account) returns()
func (_ReserveDollarV2 *ReserveDollarV2Session) Wipe(account common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Wipe(&_ReserveDollarV2.TransactOpts, account)
}

// Wipe is a paid mutator transaction binding the contract method 0x988749d1.
//
// Solidity: function wipe(address account) returns()
func (_ReserveDollarV2 *ReserveDollarV2TransactorSession) Wipe(account common.Address) (*types.Transaction, error) {
	return _ReserveDollarV2.Contract.Wipe(&_ReserveDollarV2.TransactOpts, account)
}

// ReserveDollarV2ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ReserveDollarV2 contract.
type ReserveDollarV2ApprovalIterator struct {
	Event *ReserveDollarV2Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2Approval represents a Approval event raised by the ReserveDollarV2 contract.
type ReserveDollarV2Approval struct {
	Holder  common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed holder, address indexed spender, uint256 value)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterApproval(opts *bind.FilterOpts, holder []common.Address, spender []common.Address) (*ReserveDollarV2ApprovalIterator, error) {

	var holderRule []interface{}
	for _, holderItem := range holder {
		holderRule = append(holderRule, holderItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "Approval", holderRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2ApprovalIterator{contract: _ReserveDollarV2.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed holder, address indexed spender, uint256 value)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2Approval, holder []common.Address, spender []common.Address) (event.Subscription, error) {

	var holderRule []interface{}
	for _, holderItem := range holder {
		holderRule = append(holderRule, holderItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "Approval", holderRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2Approval)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2FreezerChangedIterator is returned from FilterFreezerChanged and is used to iterate over the raw logs and unpacked data for FreezerChanged events raised by the ReserveDollarV2 contract.
type ReserveDollarV2FreezerChangedIterator struct {
	Event *ReserveDollarV2FreezerChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2FreezerChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2FreezerChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2FreezerChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2FreezerChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2FreezerChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2FreezerChanged represents a FreezerChanged event raised by the ReserveDollarV2 contract.
type ReserveDollarV2FreezerChanged struct {
	NewFreezer common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterFreezerChanged is a free log retrieval operation binding the contract event 0x97feb20f655745f67bbd05465394b86626eaafbbaae4a509a838c19237ea9da3.
//
// Solidity: event FreezerChanged(address indexed newFreezer)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterFreezerChanged(opts *bind.FilterOpts, newFreezer []common.Address) (*ReserveDollarV2FreezerChangedIterator, error) {

	var newFreezerRule []interface{}
	for _, newFreezerItem := range newFreezer {
		newFreezerRule = append(newFreezerRule, newFreezerItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "FreezerChanged", newFreezerRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2FreezerChangedIterator{contract: _ReserveDollarV2.contract, event: "FreezerChanged", logs: logs, sub: sub}, nil
}

// WatchFreezerChanged is a free log subscription operation binding the contract event 0x97feb20f655745f67bbd05465394b86626eaafbbaae4a509a838c19237ea9da3.
//
// Solidity: event FreezerChanged(address indexed newFreezer)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchFreezerChanged(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2FreezerChanged, newFreezer []common.Address) (event.Subscription, error) {

	var newFreezerRule []interface{}
	for _, newFreezerItem := range newFreezer {
		newFreezerRule = append(newFreezerRule, newFreezerItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "FreezerChanged", newFreezerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2FreezerChanged)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "FreezerChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2FrozenIterator is returned from FilterFrozen and is used to iterate over the raw logs and unpacked data for Frozen events raised by the ReserveDollarV2 contract.
type ReserveDollarV2FrozenIterator struct {
	Event *ReserveDollarV2Frozen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2FrozenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2Frozen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2Frozen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2FrozenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2FrozenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2Frozen represents a Frozen event raised by the ReserveDollarV2 contract.
type ReserveDollarV2Frozen struct {
	Freezer common.Address
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterFrozen is a free log retrieval operation binding the contract event 0xf0906ec3b3af5007c736f1174c73ff022e930e45637fbdbc797f05ea613474de.
//
// Solidity: event Frozen(address indexed freezer, address indexed account)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterFrozen(opts *bind.FilterOpts, freezer []common.Address, account []common.Address) (*ReserveDollarV2FrozenIterator, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "Frozen", freezerRule, accountRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2FrozenIterator{contract: _ReserveDollarV2.contract, event: "Frozen", logs: logs, sub: sub}, nil
}

// WatchFrozen is a free log subscription operation binding the contract event 0xf0906ec3b3af5007c736f1174c73ff022e930e45637fbdbc797f05ea613474de.
//
// Solidity: event Frozen(address indexed freezer, address indexed account)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchFrozen(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2Frozen, freezer []common.Address, account []common.Address) (event.Subscription, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "Frozen", freezerRule, accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2Frozen)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "Frozen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2MinterChangedIterator is returned from FilterMinterChanged and is used to iterate over the raw logs and unpacked data for MinterChanged events raised by the ReserveDollarV2 contract.
type ReserveDollarV2MinterChangedIterator struct {
	Event *ReserveDollarV2MinterChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2MinterChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2MinterChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2MinterChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2MinterChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2MinterChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2MinterChanged represents a MinterChanged event raised by the ReserveDollarV2 contract.
type ReserveDollarV2MinterChanged struct {
	NewMinter common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMinterChanged is a free log retrieval operation binding the contract event 0xb6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a425.
//
// Solidity: event MinterChanged(address indexed newMinter)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterMinterChanged(opts *bind.FilterOpts, newMinter []common.Address) (*ReserveDollarV2MinterChangedIterator, error) {

	var newMinterRule []interface{}
	for _, newMinterItem := range newMinter {
		newMinterRule = append(newMinterRule, newMinterItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "MinterChanged", newMinterRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2MinterChangedIterator{contract: _ReserveDollarV2.contract, event: "MinterChanged", logs: logs, sub: sub}, nil
}

// WatchMinterChanged is a free log subscription operation binding the contract event 0xb6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a425.
//
// Solidity: event MinterChanged(address indexed newMinter)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchMinterChanged(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2MinterChanged, newMinter []common.Address) (event.Subscription, error) {

	var newMinterRule []interface{}
	for _, newMinterItem := range newMinter {
		newMinterRule = append(newMinterRule, newMinterItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "MinterChanged", newMinterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2MinterChanged)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "MinterChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2NameChangedIterator is returned from FilterNameChanged and is used to iterate over the raw logs and unpacked data for NameChanged events raised by the ReserveDollarV2 contract.
type ReserveDollarV2NameChangedIterator struct {
	Event *ReserveDollarV2NameChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2NameChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2NameChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2NameChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2NameChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2NameChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2NameChanged represents a NameChanged event raised by the ReserveDollarV2 contract.
type ReserveDollarV2NameChanged struct {
	NewName   string
	NewSymbol string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNameChanged is a free log retrieval operation binding the contract event 0x6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a.
//
// Solidity: event NameChanged(string newName, string newSymbol)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterNameChanged(opts *bind.FilterOpts) (*ReserveDollarV2NameChangedIterator, error) {

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "NameChanged")
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2NameChangedIterator{contract: _ReserveDollarV2.contract, event: "NameChanged", logs: logs, sub: sub}, nil
}

// WatchNameChanged is a free log subscription operation binding the contract event 0x6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a.
//
// Solidity: event NameChanged(string newName, string newSymbol)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchNameChanged(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2NameChanged) (event.Subscription, error) {

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "NameChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2NameChanged)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "NameChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2OwnerChangedIterator is returned from FilterOwnerChanged and is used to iterate over the raw logs and unpacked data for OwnerChanged events raised by the ReserveDollarV2 contract.
type ReserveDollarV2OwnerChangedIterator struct {
	Event *ReserveDollarV2OwnerChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2OwnerChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2OwnerChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2OwnerChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2OwnerChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2OwnerChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2OwnerChanged represents a OwnerChanged event raised by the ReserveDollarV2 contract.
type ReserveDollarV2OwnerChanged struct {
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOwnerChanged is a free log retrieval operation binding the contract event 0xa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36.
//
// Solidity: event OwnerChanged(address indexed newOwner)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterOwnerChanged(opts *bind.FilterOpts, newOwner []common.Address) (*ReserveDollarV2OwnerChangedIterator, error) {

	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "OwnerChanged", newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2OwnerChangedIterator{contract: _ReserveDollarV2.contract, event: "OwnerChanged", logs: logs, sub: sub}, nil
}

// WatchOwnerChanged is a free log subscription operation binding the contract event 0xa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36.
//
// Solidity: event OwnerChanged(address indexed newOwner)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchOwnerChanged(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2OwnerChanged, newOwner []common.Address) (event.Subscription, error) {

	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "OwnerChanged", newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2OwnerChanged)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "OwnerChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2PausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ReserveDollarV2 contract.
type ReserveDollarV2PausedIterator struct {
	Event *ReserveDollarV2Paused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2PausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2PausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2Paused represents a Paused event raised by the ReserveDollarV2 contract.
type ReserveDollarV2Paused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address indexed account)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*ReserveDollarV2PausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2PausedIterator{contract: _ReserveDollarV2.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address indexed account)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2Paused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2Paused)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2PauserChangedIterator is returned from FilterPauserChanged and is used to iterate over the raw logs and unpacked data for PauserChanged events raised by the ReserveDollarV2 contract.
type ReserveDollarV2PauserChangedIterator struct {
	Event *ReserveDollarV2PauserChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2PauserChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2PauserChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2PauserChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2PauserChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2PauserChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2PauserChanged represents a PauserChanged event raised by the ReserveDollarV2 contract.
type ReserveDollarV2PauserChanged struct {
	NewPauser common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterPauserChanged is a free log retrieval operation binding the contract event 0xb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604.
//
// Solidity: event PauserChanged(address indexed newPauser)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterPauserChanged(opts *bind.FilterOpts, newPauser []common.Address) (*ReserveDollarV2PauserChangedIterator, error) {

	var newPauserRule []interface{}
	for _, newPauserItem := range newPauser {
		newPauserRule = append(newPauserRule, newPauserItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "PauserChanged", newPauserRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2PauserChangedIterator{contract: _ReserveDollarV2.contract, event: "PauserChanged", logs: logs, sub: sub}, nil
}

// WatchPauserChanged is a free log subscription operation binding the contract event 0xb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604.
//
// Solidity: event PauserChanged(address indexed newPauser)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchPauserChanged(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2PauserChanged, newPauser []common.Address) (event.Subscription, error) {

	var newPauserRule []interface{}
	for _, newPauserItem := range newPauser {
		newPauserRule = append(newPauserRule, newPauserItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "PauserChanged", newPauserRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2PauserChanged)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "PauserChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ReserveDollarV2 contract.
type ReserveDollarV2TransferIterator struct {
	Event *ReserveDollarV2Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2Transfer represents a Transfer event raised by the ReserveDollarV2 contract.
type ReserveDollarV2Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ReserveDollarV2TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2TransferIterator{contract: _ReserveDollarV2.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2Transfer)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2UnfrozenIterator is returned from FilterUnfrozen and is used to iterate over the raw logs and unpacked data for Unfrozen events raised by the ReserveDollarV2 contract.
type ReserveDollarV2UnfrozenIterator struct {
	Event *ReserveDollarV2Unfrozen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2UnfrozenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2Unfrozen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2Unfrozen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2UnfrozenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2UnfrozenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2Unfrozen represents a Unfrozen event raised by the ReserveDollarV2 contract.
type ReserveDollarV2Unfrozen struct {
	Freezer common.Address
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnfrozen is a free log retrieval operation binding the contract event 0x295f47d48ca3de5c5214af57c89859243090803a47bbca8a4bbe6231a77067b4.
//
// Solidity: event Unfrozen(address indexed freezer, address indexed account)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterUnfrozen(opts *bind.FilterOpts, freezer []common.Address, account []common.Address) (*ReserveDollarV2UnfrozenIterator, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "Unfrozen", freezerRule, accountRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2UnfrozenIterator{contract: _ReserveDollarV2.contract, event: "Unfrozen", logs: logs, sub: sub}, nil
}

// WatchUnfrozen is a free log subscription operation binding the contract event 0x295f47d48ca3de5c5214af57c89859243090803a47bbca8a4bbe6231a77067b4.
//
// Solidity: event Unfrozen(address indexed freezer, address indexed account)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchUnfrozen(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2Unfrozen, freezer []common.Address, account []common.Address) (event.Subscription, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "Unfrozen", freezerRule, accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2Unfrozen)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "Unfrozen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2UnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ReserveDollarV2 contract.
type ReserveDollarV2UnpausedIterator struct {
	Event *ReserveDollarV2Unpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2UnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2UnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2Unpaused represents a Unpaused event raised by the ReserveDollarV2 contract.
type ReserveDollarV2Unpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address indexed account)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*ReserveDollarV2UnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2UnpausedIterator{contract: _ReserveDollarV2.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address indexed account)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2Unpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2Unpaused)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarV2WipedIterator is returned from FilterWiped and is used to iterate over the raw logs and unpacked data for Wiped events raised by the ReserveDollarV2 contract.
type ReserveDollarV2WipedIterator struct {
	Event *ReserveDollarV2Wiped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarV2WipedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarV2Wiped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarV2Wiped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarV2WipedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarV2WipedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarV2Wiped represents a Wiped event raised by the ReserveDollarV2 contract.
type ReserveDollarV2Wiped struct {
	Freezer common.Address
	Wiped   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWiped is a free log retrieval operation binding the contract event 0xaa7ccaa635252f24fc5a4665e7c4a8af5aa588c2e60d326c1196a0e4d2d59f2c.
//
// Solidity: event Wiped(address indexed freezer, address indexed wiped)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) FilterWiped(opts *bind.FilterOpts, freezer []common.Address, wiped []common.Address) (*ReserveDollarV2WipedIterator, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var wipedRule []interface{}
	for _, wipedItem := range wiped {
		wipedRule = append(wipedRule, wipedItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.FilterLogs(opts, "Wiped", freezerRule, wipedRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarV2WipedIterator{contract: _ReserveDollarV2.contract, event: "Wiped", logs: logs, sub: sub}, nil
}

// WatchWiped is a free log subscription operation binding the contract event 0xaa7ccaa635252f24fc5a4665e7c4a8af5aa588c2e60d326c1196a0e4d2d59f2c.
//
// Solidity: event Wiped(address indexed freezer, address indexed wiped)
func (_ReserveDollarV2 *ReserveDollarV2Filterer) WatchWiped(opts *bind.WatchOpts, sink chan<- *ReserveDollarV2Wiped, freezer []common.Address, wiped []common.Address) (event.Subscription, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var wipedRule []interface{}
	for _, wipedItem := range wiped {
		wipedRule = append(wipedRule, wipedItem)
	}

	logs, sub, err := _ReserveDollarV2.contract.WatchLogs(opts, "Wiped", freezerRule, wipedRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarV2Wiped)
				if err := _ReserveDollarV2.contract.UnpackLog(event, "Wiped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
